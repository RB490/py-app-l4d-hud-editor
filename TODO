✔ Bug: The program is saving GUI position when it's coordinates couldn't be retrieved. Start but probably others // seems to happen when starting up the program? @done(23-08-27 22:33)
✔ Bug: Popup menu should be part of browser @done(23-08-27 23:28)
✔ Bug: Hotkey for showing editor menu isn't working // could be that when start/browser is destroyed that shit gets destroyed @done(23-08-27 23:28)
✔ Bug: Hotkey for toggling browser doesn't work at all @done(23-08-27 23:28)
✔ Bug: Start eiditing -> Close game -> editor.__set_hud_info() error: NoneType @done(23-08-27 23:28)
✘ #py BaseGui should could probably have mandatory root param root_or_toplevel? @cancelled(23-08-28 13:46)
✘ #Py Could should i make browser a child of start gui? @cancelled(23-08-28 13:51)
	✘ Pros: You can create multiple windows in your application, each with its own widgets and options. You can also control the appearance and behavior of each window separately, such as title, icon, geometry, etc. @cancelled(23-08-28 13:51)
	✘ Cons: You need to manage the communication between the windows, such as passing data or events. You also need to handle the cases when the user closes one window but not the other. @cancelled(23-08-28 13:51)
	✘ ^ not doing this because added complexity and barely if any benefits @cancelled(23-08-28 13:51)
✘ #Py Look up some professional tkinter base guis @cancelled(23-08-28 14:09)


Current:

	☐ Refactor: Use proper toplevel on UserInputWindow
	☐ Refactor: Document behaviour about how TopLevel should be used to prevent calling from TLC
		- It comes down to only one main mainloop() being allowed. other TopLevel mainloops need to be based from of the first one
	☐ Refactor: Cleanup BaseGui/Browser related code to topLevel
	☐ Refactor: Cleanup todo's related code to topLevel

	☐ Toplevel windows don't need their own mainloop() because they are managed by the main application's event loop

	☐ Feature: Scale popup gui to the window's full size on right startup // also where is it being done right now? a bit slow?

	☐ Refactor: toplevel should receive parent. replace is_modal_window with parent_instance. keep the tk.tk() thing to hide the weird gui but only if parent doesn't exist or something
		- top_level_window = tk.Toplevel(self.root)

	☐ Refactor: create_widgets method & submethods for individual frames and/orwidgets


	☐ Bug: Browser popup hotkey -> terminal says : Running GUI Editor Context Menu Popup & error shows, every consequent context menu show after that no problem

	☐ Bug: When toggling browser visibility i get a  bunch of errors in my terminal
		- same with opening the popup menu
		- basegui.py disabling mainloop() (if hidden/modal) works


		- ^ might be that i'm, oh, uh, i'm doing mainloop() on every window show() which is probably not great


	☐ Testing: Test the program by using it to edit HUD's
	
	☐ Testing: Get the AHK version working and check it out to confirm feature parity
	
	☐ Refactor: Editor: start_hud_editing - ask GPT, a lot of duplicate code
	☐ Refactor: Editor: finishg_hud_editing?
	☐ Refactor: Make a little class to run the two main GUI's: Start & Browser

	☐ Feature: Readme.md -> add ahk version's readme.md with maybe some (formatting) improvements

Release:
	- GoaL: Being able to smug the program and have it 100% work for him on first try
	☐ Version numbers
	☐ Auto updating
	☐ Link to the github repo in an 'about' gui
	☐ A way to test the program in a fresh environment. Maybe a virtual machine
	☐ Full coverage unit testing? or atleast the important parts like HudDescription/ID FileHandler/more?
	☐ Ask GPT on how to do this properly

Post:
	☐ Post: Unit test: HudDescription
	☐ Post: Unit test: ID File Handler
	☐ Post: Multi-game support: Explore multi-game support feasibility
	☐ Post: Command line: Evaluate potential of using command line interface instead of GUI
	☐ Post: Idea: Threading (GUI) for lengthy operations such as shutil.rmtree mostly during install (Adds complexity) to prevent GUI's from freezing
	☐ Post: Optimize and improve functions, methods, and overall structure based on GPT suggestions
	☐ Post: Enable type checking? "python.analysis.typeCheckingMode": "off"
	☐ Post: Use types for variables and params and such? "python.analysis.typeCheckingMode": "off"
	☐ Post: decouple classes as much as possible by passing parameters instead of directly referencing other classes