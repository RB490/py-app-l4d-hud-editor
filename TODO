exceptions:
    ☐ game.window.run()
    ☐ game.dir.set()


installation issue:

current: 

    ☐ id file: refactor: Game.Dir has 'check_for_invalid_id_file_structure' which looks like it should be part of id file class(?)
        - it can/could gbe part of id_handler __get_path(). i just need to consider what happens if i throw an exception there. i'm pretty sure when i set/get most values i don't handle exceptions
        - could use messagebox.showerror("Error", str(e)) and then quit() after
        - could also move 'check_for_invalid_id_file_structure' to the id_handler class & make the invalid files checking some internal function(s) which are used by __get_path and 'check_for_invalid_id_file_structure'. __get_path() definetly needs to confirm valid id file structure paths regardless


        - ^ also, check_for_invalid_id_file_structure is used in many places. this would clean it up by a lot. just perform the checks inside dir_id_handler and if there's an issue, quit the program because this is an edge case anyways

    ☐ id file: user + dev id file deleted. installer handles it okay: dev context menu: install/update/repair/remove
        - open directory user/dev doesn't
        - activate mode user/dev doesn't
    
    ☐ refactor: use exceptions rather than true/false

    ☐ id file: idea: create get/set keys for retrieving which mode that id file is, similar to the others get_sync get_install_state and use that throughout the program. eg: game.dir.get() uses the id file name right now, might be  better to do it like this
        - can find these instances with: id.get_file_name
        - ^ this might or might not be a good idea. in any case if i do add 'UNKNOWN' state i would have to look through the rest of my code to see where changes need to be made

    ☐ id file: refactor: installation is writing id file. im 99% sure this isnt best practice. improve this by moving it to the id file class
        # write id file
        id_path = os.path.join(dev_dir, self.game.dir.id.get_file_name(DirectoryMode.DEVELOPER))

    ☐ Sync class inspect 'get_sync_status' it sets sync state before getting it? doesnt that defeat the point

    ☐ testing: installer/id_file: perform new installation of dev folder in the same way it broke before. Which means installing about halfway then cancelling, and resuming

    ☐ setting user director should be done manually. if found a pre existing path, use that (parent folder) to open the folder select interface. this is because i will have multiple l4d2 installations for modding, dont want to randomly pick one

    ☐ Fixed shared logging filter. Couldnt filter hwnd utility shared manager

testing:

    ☐ test: Test the program by using it to edit HUD's