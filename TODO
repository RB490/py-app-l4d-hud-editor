Features:

	☐ Cleanup todo

	Game class:
		☐ Rewrite the game class from first principles
			Goal: Extremely proper game class with no ambiguity so rewrites don't have to happen
			Keep error handling to a minimum to none. Just functions that return True/None. Do later as needed
		✔ Test & finish game.dir.set() @done(23-08-15 20:10)
		✔ Create installer class @done(23-08-15 20:17)
		☐ Write installer class
		☐ Test installer class

		Installer:
			☐ run_installer
			☐ Installer: Use stored installation status to perform actions. UNKNOWN = delete, in_progress_extracting
			☐ Installer: Dev mode not installer -> install -> a bunch of prompts to select it
				☐ Consider setting manually selecting directory to disabled by default
				☐ Refactor & reduce the cluttered logic @today
					(because even with pretty intense debugging i don't understand what's going on)
					*   Get_dir should not manually set dir that should be done elsewhere
					*   Manually select dir shouldnt be passed around so much or at all
			
			☐ Installer: Handle CANCELLED installation state by handling any unknown installation state - deleting and restarting
			☐ Installer: Split installation into separate class
			☐ Installer: Raise and handle exceptions. For example failing to rebuild audio cache
			☐ Installer: Still allow enabling of user mode or dev mode when the other isn't available
			☐ Installer: Handle cancelling of manual directory selection. should abort whatever task was being performed

		Extra:
			✔ Error catching for game.dir.set() aka swap folders @done(23-08-15 20:37)
				Could do this in various ways. a loop to try it for x amount of seconds
				At the very least i should catch exceptions from os.rename

		Implementation:
			☐ Prompt to manually set the dev directory in hud_editing.start

	General:
		☐ Implement cleanup of dev directory when install gets cancelled
		☐ Handle script closure to ensure unsyncing even during crashes or failures
		☐ Refine error handling strategy in sync class, possibly during unit testing
		☐ Review and enhance target directory validation in sync()

Bugs:
	☐ Resolve GUI hanging when running lengthy tasks like uninstalling dev folder
	☐ Fix 'added' files option not working in treeview, no data retrieved
	☐ Address in-game console bugs related to malformed VPK addons loading
		☐ Explore potential fixes, e.g., creating small VPK to overwrite malformed ones
	☐ Investigate console errors for failing to load maps

GUI:
	☐ Add context menu functionality for treeview in browser
	☐ Add icons to enhance GUI aesthetics
	☐ Incorporate progress GUI for the installer class
		☐ Implement for install, update_or_repair, and remove operations
	☐ Menu: Add icons
	☐ Add GUI icons
	☐ Add GUI button icons
	☐ Display custom and added-to-hud status for files in the browser
		☐ Consider adding columns or a status bar
	☐ Enhance context menu icons in the treeview

Unit Testing:
	☐ Create test classes for HUD descriptions(?) and definetly HUD syncer
	☐ Test all menu options for robustness

Refactoring:
	Exceptions and Returns:
		☐ Am I using too many exceptions? When should i return a (None) value instead
			Consider code paths. For example retrieving the steam game dir is vital,
			if that fails. the program should raise an exception, then maybe catch it
			and display it in a messagebox. or display the message box inside the class?
	☐ Private and internal classes dont need param checking, only public
	☐ Handle 'utf-8' codec error when VPK class fails to extract specific files
	☐ Make internal class methods protected by adding underscores. And internal with double __
	☐ Add dir_mode enum checks to game class?
	☐ Remove duplicate code in hud.py related to GuiHudStart instance creation
		☐ Automatically detect and refactor
	☐ Utilize exception handling for specific cases like AssertionError and ValueError
	☐ Simplify manager class, improve 'get_dir' function and other enhancements
	☐ Enums. For example for steam_info object (?) or make it into a class
	☐ Replace assert statements with proper error handling using try/catch
	☐ Use Super(). This can elimiate the need to for example define self.persistent_data again in subclasses
	☐ self.game.run("dev", "wait on close") -> wait_on_close=True/False
	☐ Make the function to create lambda commands a shared utility, and use it in the project
	☐ Streamline and test HUD editing process for improved code path
	☐ Consider simplifying main GUI by integrating its functionality into menu class
	☐ Explore restructuring options for more efficient code flow
	☐ Evaluate the use of singleton patterns in GUI management
	☐ Centralize video settings calls into a general function
	☐ Break up the game commands execute method for better organization
	☐ Consider alternatives for using subclasses and direct referencing
	☐ Reevaluate the use of persistent_data in classes, possibly with a dedicated class or alternative approach
	☐ Optimize and improve functions, methods, and overall structure based on GPT suggestions
	☐ Installer: Add try&except for validate_mode_parameter calls with custom invalid mode param exception to catch
		☐ Determine what should happen for each instance

Additional Ideas and Considerations:
	☐ Global hotkey management: Explore using a global singleton hotkey manager to streamline hotkey handling
	☐ Editor menu: Add all start GUI functionality. We're almost there already.
		☐ Use the relevant menu's from the editor menu in start to prevent duplication
	☐ Multi-game support: Explore multi-game support feasibility
	☐ Command line: Evaluate potential of using command line interface instead of GUI

	Notes
	- https://github.com/RB490/py-app-l4d-hud-editor/blob/580ad38869ce6babdd931836555ee3187984c99c/todo_legacy.md
	
Archive:
	✔ Installer: Keep track of installation status @done(23-08-12 17:17)
	✔ Use InvalidIDError @done(23-08-12 15:55)
	✔ Use dir_mode & installation status enum's throughout the game manager @done(23-08-12 15:55)


Todos shortcuts:
	You can write plain text notes/descriptions wherever you want
	New:
		✔ Press Cmd/Ctrl+Enter to add a new todo @done(23-08-12 00:05)
	Done:
		✔ Press Alt+D to mark a todo as done @done(23-08-12 00:12)
		✔ Press it again to undo the action
	Cancelled:
		✘ Press Alt+C to mark a todo as cancelled
		☐ Press it again to undo the action
	Tagging:
		☐ You can add tags using the @ symbol, like this @tag
		☐ There are some special, customizable tags: @critical @high @low @today
	Timekeeping:
		✔ Completed todos can show a timestamp @done(17-11-03 10:42)
		☐ Press Alt+S to mark a todo as started @started(23-08-15 20:13)
		✔ Now it will show the elapsed time @started(17-11-03 10:42) @done(17-11-03 20:11) @lasted(9h29m)
		☐ You can provide time estimates for your todos @1h30m
		☐ We are even doing some natural language processing @est(1 day and 20 minutes)