Archive:

	✔ Bug: editor menu -> show panel doesn't seem to take selected panel into account at all? doesnt toggle anything @done(23-08-27 12:22)
	✔ Feature: editor menu -> Show set coords in the menu @done(23-08-27 11:55)
	✔ Feature: Added ImageConstants class @done(23-08-27 12:41)

Current:
	
	✔ Bug: VDF gui doesn't load. atleast for hudlayout.res @done(23-08-27 14:21)
	✔ Bug: VDF GUI always defaulting geometry when loaded through browser @done(23-08-27 14:29)

	✔ Menu: @icons  Add icons @done(23-08-27 16:32)
	☐ Menu: @icons  Test: Do toggleable menu options support icons in any way or state?

	☐ Bug: Browser -> Open start gui -> errors. This is most likely because i only create widgets once. and its a singleton

	☐ Editor menu: Add all start GUI functionality. We're almost there already. for example i can add but not create new huds
		☐ Use the relevant menu's from the editor menu in start to prevent duplication

	☐ Refactor use the image constants class everywhere


Additional Ideas and Considerations:
	
	☐ Multi-game support: Explore multi-game support feasibility
	☐ Command line: Evaluate potential of using command line interface instead of GUI
	☐ Pull some workshop map off of steam to use for L4D2. And possibly a map for L4D1
	☐ Idea: Use threading GUI during lengthy operations such as shutil.rmtree during installation  (Adds complexity)
	☐ Browser: Status bar showing 'custom' & 'added-to-hud' status?
	☐ Browser: Treeview context menu toggle entries based on availablility? eg. default item might not be available self.menu_bar.entryconfig("Hud", state="disabled")
	☐ Idea: Already tried this for an hour. But a way to retrieve the OS's default icon for a file path to be used in the treeview
	☐ Bug: Currently the game gets bound to the python process, and also closes if the script closes @impossible? (note that outside of debugging this more or less isn't an issue, or maybe even a feature)
		- Seemingly impossible although apparently it is possible: Run a process detached from python
		- Note: Running the game before starting the editor works fine.
			- so could use a script to launch it and then the editor
		- I was able to get it to work with notepad.exe using subprocess start /B notepad.exe,
		- however that didn't work for the game or steam
		- this is legitimately around 2 hours of trail and error: python_process_decouple_testing.py
	☐ Bug: During extracting pak01's the gui freezes up. didn't i find and apply a fix for this elsewhere in the code? or a different project (seems unlikely)?
		- Use after Method for Updating: Instead of running the progress update loop inside uninstall(), you can use the after method to schedule updates at specific intervals. This will ensure that the GUI's main event loop remains responsive and the GUI updates are processed correctly.
		- might have decided to not bother because asyncio and threading was kinda aids. it would be really nice to have for the installer gui, however
	☐ Feature: Can i find a way to show a context menu which closes then losing focus using python? Can try to get Tkinter to work & maybe other frameworks
	☐ Bug: Show_browser_gui() ->  can't invoke "event" command: application has been destroyed
		- doesn't happen when showing start (so destroying browser)
		- doesn't happen when delayed by input()
		- not even an issue
		- could maybe separate creating widgets from init, and creat them when showing (only once)
	☐ make a shared folder for a python modules ask gpt and the solution I came up with is environment variable to a python module directory which gets enforced by The script // een programming en project Python Dash files
		☐ Bing says PYTHONPATH or making a package. so i can include it like any other package?
		☐ Added D:\Programming and projects\python-files\shared_modules . just needs a restart

Unit Testing:
	
	☐ Unit test: HudDescription
	☐ Unit test: ID File Handler

Post:
	☐ Post: Optimize and improve functions, methods, and overall structure based on GPT suggestions
	☐ Post: Enable type checking? "python.analysis.typeCheckingMode": "off"
	☐ Post: Use types for variables and params and such? "python.analysis.typeCheckingMode": "off"
	☐ Post: decouple classes as much as possible by passing parameters instead of directly referencing other classes