✔ Feature: Write self.item_changes to ID file (often, everywhere) @started(23-09-06 06:24) @done(23-09-06 06:39) @lasted(15m57s)
✔ Syncer currently imports the game class & imports code to restore game dev directory. that should be done in hud.start_editing instead @done(23-09-06 07:11)
✔ Feature: Keep 'item_changes' data structure as up to date as possible on disk. inside the ID file. @done(23-09-06 07:11)
✔ Feature: Unsync changes if program failed to exit -- Read self.item_changes from ID file if sync status -- aka use this to unsync where needed @done(23-09-06 07:11)
✔ Refactor: ID: Use decorators for checking dir_mode @done(23-09-06 07:53)

Current:
	

	☐ Refactor: Where did i previously use restore_developer_directory and do i still need it?

	☐ Feature: (Recovering) Backups: Consider how i want to handle this after modifying the sync class to always be able to unsync properly. Having backups is probably still a nice feature to have. But i guess i don't have to restore them anymore. Atleast automatically

	☐ Refactor: ID Handler: overlap between get_state set_state and set_sync get_sync

Todo:		

	☐ Feature: ID Handler: Automatically open the steam games directory when prompting to manually select path

	☐ Feature: Menu: Game: AlwaysOnTop + remember this setting(?)
	
	☐ Feature: Browser: Modify get vanilla file to rename to default extension without .backup if needed and create a temporary copy in %temp% and return that

	☐ Feature: Menu: In AHK i had some method to keep resizing the game until it successfully did so to prevent the black window thing. i should do that in python now as its needed
	
	☐ Feature: BaseGUI: Add code example. Small as possible main gui

	☐ Feature: Installer: Threading: Instead of running large blocks of code inside threads instead run long running lines of code. for example deleting/copying a folder or extracting a VPK. Should be fairly straight forward to do. Though one issue is how will i retrieve potential errors and output in general from the thread?

	☐ Feature: Program: Rename to L4D2 HUD Editor or something like that. HUD Editor for L4D2

	☐ Feature: Menu: Move about into the help menu

	☐ Bug: Browser isn't visible -> unsync hud -> browser opens to clear treeview

	☐ Feature: Auto updating: GUI: Add version number from github vs version number from local script
	
	☐ Feature: Auto updating: add a check on program startup to compare versions. Only show that every couple days for example
	
	☐ Feature: About GUI: Rename into 'Update'?
	
	☐ Feature: Browser/Start GUI: Add version #?
	
	☐ Feature: Version #: Automatically increase the # based on git commits or something else?

	☐ Feature: Auto updating: Look into how fully auto updating would work
	
	☐ Unit testing: Game Dir module
	
	☐ Unit testing: Syncer
	
	☐ Unit testing: ID Handler
	
	☐ Unit testing: HUD Description
	
	☐ Research: Ask GPT on how to properly test a program so it's ready for release
	
	☐ Research: Ask GPT on how to properly prepare a python program for release
	
	☐ Testing: Clean environment: Test the program in a virtual machine. Bonus points for getting the game to run through a shared folder
	
	☐ Testing: Test the program by using it to edit HUD's
	
Release:
	☐ Goal: Being able to have third parties (smug) run the program and have it 100% work on first try