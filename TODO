

Current:


	Features:	
	☐ Installer: Only prompt to select dev directory, if it wasnt found
	
	☐ Bug: Finished installinging! when finished installing

	☐ Refactor: remove game_class passing to prompts? by creating an instance in the func

	☐ Refactor: installer's install() repair() update() have a lot of duplicate code. consider my options
	
	

	☐ Installer message boxes:
		☐ Finished uninstalling
		☐ Finished installing/repairing/updating
	
	☐ Copy_dir considerations: 
		- I'm only using the copy_dir function because i made it be able to ignore files but i cant just use copytree & then delete the file
		- So Copytree is probably faster. Then again if i want a copy file progress bar it could be useful
		- Does shutil.copytree support progress bars?

	☐ Refactor: VPK class

	☐ Handle VPK class failing to extract specific files during installation

	☐ Start GUI: Context menu icons

	☐ Start GUI: Specific button icons rather than all identical

	☐ Feature: Check whether the developer directory is out of date by comparing the (some) pak files
		☐ Refactor: Installer has __extract_outdated_paks. i need to use (some of this code) this to automatically check if dev installation is out of date
			☐ Eextracting outdated paks doesn't make sense because if the dev folder is outdated it any way i would want to verify the installation

	☐ Installer: Incorporate progress GUI for the installer class. Install/update/repair/delete


	☐ Refactor: is_custom_file finds the first possible match of the default file in the dev folder. use this throughout the script (probably just for the browser open default file) & rename method accordingly

	☐ Refactor: Browser: Show all hud files -> a shit ton of calls to look up various info causing unnecesary slowdown

	☐ Refactor: Start GUI. Messageboxes for dev menu results // Remove menu bar -- button should open that context menu

Bugs:

GUI:

Unit Testing:
	
	☐ Unit test: HudDescription
	☐ Unit test: ID File Handler

Refactoring:

Additional Ideas and Considerations:
	
	☐ Menu: @icons  Add icons
	☐ Editor menu: Add all start GUI functionality. We're almost there already.
		☐ Use the relevant menu's from the editor menu in start to prevent duplication
	☐ Multi-game support: Explore multi-game support feasibility
	☐ Command line: Evaluate potential of using command line interface instead of GUI
	☐ Pull some workshop map off of steam to use for L4D2. And possibly a map for L4D1
	☐ Idea: Use threading GUI during lengthy operations such as shutil.rmtree during installation  (Adds complexity)
	☐ Browser: Status bar showing 'custom' & 'added-to-hud' status?
	☐ Browser: Treeview context menu toggle entries based on availablility? eg. default item might not be available self.menu_bar.entryconfig("Hud", state="disabled")
	☐ Idea: Already tried this for an hour. But a way to retrieve the OS's default icon for a file path to be used in the treeview
	☐ Bug: Currently the game gets bound to the python process, and also closes if the script closes @impossible? (note that outside of debugging this more or less isn't an issue, or maybe even a feature)
		- Seemingly impossible although apparently it is possible: Run a process detached from python
		- Note: Running the game before starting the editor works fine.
			- so could use a script to launch it and then the editor
		- I was able to get it to work with notepad.exe using subprocess start /B notepad.exe,
		- however that didn't work for the game or steam
		- this is legitimately around 2 hours of trail and error: python_process_decouple_testing.py
	☐ Bug: During extracting pak01's the gui freezes up. didn't i find and apply a fix for this elsewhere in the code? or a different project (seems unlikely)? might have decided to not bother because asyncio and threading was kinda aids
	☐ Post: Optimize and improve functions, methods, and overall structure based on GPT suggestions



--Archive--:
	✔ install_update_repair_duplicate_code_refactor_draft.py @done(23-08-24 16:26)
	✔ Refactor: editor class. Some notes: start_editing has confusing checks like: if self.syncer.get_sync_status() and self.syncer.get_source_dir() == self.hud_dir and sync_hud @done(23-08-24 12:19)
	✔ Refactor: ID handler: Consider simpler names? eg: game.dir.id.set_id_path could maybe be just id.set() @done(23-08-24 12:17)
	✔ Bug: Addon images are not in the center of StartGui. Fixed by removing: self.picture_canvas.config(scrollregion=self.picture_canvas.bbox("all")) @done(23-08-24 11:42)
	✔ Feature/Refactor/Bug: I'm currently manually setting the hud_dir, but this should definetly be done with set_dir method @done(23-08-24 11:50)
	✔ Refactor GameDir: A bunch of duplicate code related to methods like: get_main_dir_backup, get_main_dir_backup_materials @done(23-08-24 12:12)
	✔ Fixed a wide variety of BaseGui & infinite recursion import bugs @done(23-08-24 11:06)
	✔ HudDescriptions is failling because it's importing GuiBrowser & GuiBrowser is failing because? it imports GuiHudDescriptions? recursive? @done(23-08-24 11:08)
	✔ Modify syntax from self.hud.sync self.hud.desc -> self.hud.editor.syncer @done(23-08-24 11:08)
	✔ Re-enable self.root.title lines @done(23-08-24 11:08)
	✔ Bug: VDF modifier causing infinite loop: GUI VDFModifier > load_file > VDFModifier > loop starts with hud and shit @done(23-08-24 11:08)
	✘ Global hotkey management: Explore using a global singleton hotkey manager to streamline hotkey handling @cancelled(23-08-24 01:11)
	✔ Bug: GUI: I can use show() method for my gui without first having ran the gui's mainloop with run() @done(23-08-24 01:10)
	✔ Refactor GameDir: should get_main_dir_backup check if the directory is valid? or in the code that uses it @done(23-08-24 00:56)
	✘ Refactor ID handler: Should i combine the manual selecting of ID path into the get/set functions? @cancelled(23-08-24 00:56)
		✘ That would simplify some code paths: -- although it seems like that would maybe defeat the single purpose principle? @cancelled(23-08-24 00:56)	
	✔ Refactor: descriptions: Pretty sure it could/should use my general functions for loading/saving data @done(23-08-24 00:55)
	✔ Refactor: use the same two functions for loading/saving data? might cause unnecesary class cluttering. ask gpt @done(23-08-24 00:55)
	✔ Make internal class methods protected by adding underscores. And internal with double __ @done(23-08-24 00:54)
	✔ Add dir_mode enum checks to game class? @done(23-08-24 00:54)
	✔ Utilize exception handling for specific cases like AssertionError and ValueError @done(23-08-24 00:54)
	✔ Simplify manager class, improve 'get_dir' function and other enhancements @done(23-08-24 00:54)
	✔ Enums. For example for steam_info object (?) or make it into a class @done(23-08-24 00:53)
	✔ Replace assert statements with proper error handling using try/catch @done(23-08-24 00:52)
	✔ Make the function to create lambda commands a shared utility, and use it in the project @done(23-08-24 00:51)
	✔ Streamline and test HUD editing process for improved code path @done(23-08-24 00:46)
	✔ Explore restructuring options for more efficient code flow @done(23-08-24 00:45)
	✔ Evaluate the use of singleton patterns in GUI management @done(23-08-24 00:45)
	✘ Break up the game commands execute method for better organization @cancelled(23-08-24 00:45)
	✘ Installer: Add try&except for validate_mode_parameter calls with custom invalid mode param exception to catch @cancelled(23-08-24 00:38)
	✔ Reevaluate the use of persistent_data in classes, possibly with a dedicated class or alternative approach @done(23-08-24 00:37)
	✔ Refactor GameDir: Ensure functions like get_main_dir_backup, get_main_dir_backup_materials are used throughout the codebase @done(23-08-24 00:35)
	✔ Added clear messageboxes to installer failures @done(23-08-24 00:35)
	✘ Refactor: Private and internal classes dont need param checking, only public @cancelled(23-08-24 00:33)
	✘ Use Super(). This can elimiate the need to for example define self.persistent_data again in subclasses @cancelled(23-08-24 00:32)
	✔ Refactor: In functions.py there are a lot of functions (somewhat vaguely) related to hud stuff it seems like that should could be a class @done(23-08-24 00:31)
	✔ Refactor: GUI: Base GUI class with common functionality for all other gui's to use @done(23-08-23 23:44)
	✔ Refactor: I'm passing my persistent_data object absolutely everywhere. Create a persistent_data class singleton instead @started(23-08-23 21:34) @done(23-08-23 22:40) @lasted(1h6m54s)
	✔ Refactor: Loading&Saving JSON data. Create class & use throughout the program @done(23-08-24 01:11)
	✘ Refactor: Rename data manager to persistent data? @cancelled(23-08-23 22:42)
	✔ Bug: VDF gui not loading for hudlayout.res @done(23-08-23 16:36)
	✔ Bug: VDF GUI: The little tk.toplevel() subgui opens real quick when loading the gui @done(23-08-23 16:38)
	✔ Bug: Installer: Dev was fully installed -> repair dev install -> install created another dev folder? causing issues @done(23-08-23 16:49) they were incorrectly using the current install state
	✔ Bug: game.dir.Set() cancelled because vanilla game dir didn't exist. but that doesnt mattter @done(23-08-23 16:57)
	✔ Test: Installer: New is_game_files_dir_return_pak01 method (install, repair or whatever) @done(23-08-23 16:58)
	
	✔ Bug: Installer would ignore exceptions and always report the installation as successfull
	✔ Bug: Installer rebuild_audio couldn't run game (because of fixed bug) but it didn't detect that shit at all! @done(23-08-23 17:27)

	✔ Bug: Why does VSCode not highlight class in some places but does in others // looks like this is because of me passing game_class to installer manually @done(23-08-23 20:50)
	✔ for example hud/descriptions/self.game.dir.is_custom_file() works fine @done(23-08-24 01:10)
	✔ but in some locations it wouldnt get highlighted such as: installer: self.game.dir.get_main_dir_backup @done(23-08-24 01:10)
		✔ ^ okay, so, gpt says it's deue to the nature of VSCode's static analysises tool and using type hints could fix it. but i need to import the game class @done(23-08-24 01:10)
		✔ into the installer which isn't possible. gpt suggested various solutions which seemed maybe possible but seems like something i would leave for later @done(23-08-24 01:10)
		✔ ^ use pycharm. it does support it @done(23-08-23 20:50)
	✔ Descriptions: Add print statements @done(23-08-23 13:17)
	✔ Bug: Descriptions GUI: Modify file description -> save -> load same file -> changes weren't actually saved at all @done(23-08-23 13:24)
	✔ Bug: Descriptions GUI: Saving contents for a custom hud file causes an error. either allow saving somehow, or disallow them from opening @done(23-08-23 13:38)
	✔ Refactor: Installer __find_pak_files manually uses pak01_dir.disabled -- the installer class should use the get backup path function @done(23-08-23 13:52)
	✔ Refactor: Installer: Use new is_game_files_dir_return_pak01 method @done(23-08-23 14:27)
	✔ Modify descriptions class to keep track of whether a file is custom. This is useful so i have the option to not show thene when showing 'not added yet' files in the browser @done(23-08-23 15:19)
	✔ Feature: Description GUI: Option to remove this file entirely from the description data @done(23-08-23 15:35)
	✔ Feature: Description GUI: Show whether this is a custom file or not @done(23-08-23 15:39)
	✔ Bug: Descriptions GUI: Have a file loaded -> open another file -> contents are discarded. should probably  not allow this or do something else @done(23-08-23 16:31)
	✔ Refactor. Add method docs @done(23-08-23 01:48)
	✔ VDF: A single gui for modifying the VDF files. All the options such as annotate, integers + text fields with a before & after. + warning about larger (scheme) files + backup in recycle bin @done(23-08-23 01:55)
		✔ GPT did a great job. looks like i should modify how the class works some to fully support this. for example return data @done(23-08-23 01:55)
	✔ Feature: VDF: Save option @done(23-08-23 02:29)
	✔ Feature: VDF: Verify output validity by using the vdf module to load it before saving/returning @done(23-08-23 02:29)
	✔ Feature: VDF: Bug: Reset -> DELETE_ME entry is shown? @done(23-08-23 03:04)
	✔ Feature: VDF: Add support for also deleting entire controls, not just keys as they can also be identifiere'd @done(23-08-23 03:04)
	✔ Browser: Treeview context menu functionality: VDF: Modify @done(23-08-23 03:08)
	✔ Bug: VDF: Confirm file was able to be read properly, if not return @done(23-08-23 03:16)
	✔ Refactor: simplify & improve code (naming) @done(23-08-23 03:17)
	✔ Sync: Refactor(?) @done(23-08-24 00:36)
	✔ Feature: VDF: Proper before & after comparison @done(23-08-23 00:55)
	✔ Feature: VDF: With annotation disabled the __description__ keys should be removed @done(23-08-23 00:59)
	✔ Feature: VDF: Save window geometry @done(23-08-23 01:09)
	✔ Bug: VDF GUI: When closing the script goes on to do some stuff: Modifying integer values...Save the modified VDF object to a file @done(23-08-23 01:10)
	✔ Feature: VDF: Proper widget layout. before&after side by side and the controls nicely layed out. Integer modifying should be a self contained lil group of controls @done(23-08-23 01:13)
	✔ Feature: VDF: Save certain settings for the vdf gui @done(23-08-23 01:14)
	✔ Feature: VDF: Undo changes. Either programatically or (more likely) reload from file @done(23-08-23 01:47)
	✔ Bug: VDF Modify intergers did not recursively modify so split_screen type key:values werent modified @done(23-08-22 22:17)
	✔ Bug: VDF class didn't handle letter values properly such as "c-150" @done(23-08-22 22:12)
	✔ 1. String: Preprocessing of the file (properly removing xbox360 entries and such, can possibly be quite easy, test removing splitscreen key and then loading into vdf) @done(23-08-22 17:35)
	✔ loop file line by line. find identifier lines. replace the text between double quotes with DELETE_ME or something like that so the file format remains intact and vdf module can delete these @done(23-08-22 17:36)
	✔ 2. VDF Module: Load vdf into object and make any changes such as changing the integers @done(23-08-22 17:44)
	✔ 3. String/ VDF Module: Output either with vdf.dump for easiness or as string with added benefits such as properly inserting control descriptions & aligning the key's values on the same indent level @done(23-08-22 21:38)
	✔ 4. VDF Feature: Sort keys @done(23-08-22 20:50)
	✔ Browser: @icons Treeview context menu icons - fetch from ahk version @done(23-08-21 21:15)
	✔ Browser: Treeview context menu functionality: treeview_recycle @done(23-08-21 19:58)
	✔ Browser: Treeview context menu functionality: hud descriptions @done(23-08-20 22:59)
	✔ Browser: Disable multiple instances for the gui descriptions gui @done(23-08-20 22:40) made it a singleton
	✔ Bug: Hud Descriptions Gui: Remove default options for controls @done(23-08-20 22:38)
	✔ Bug: Try to load any file without controls into the hud descriptions gui -> some error @done(23-08-20 22:33)
	✔ Add all functionality of the start gui into the editor menu. Remaining: Create/Add hud & dev options menu @done(23-08-20 22:21)
	✔ Bug: Browser: 'All' toggle isn't working right. only addoninfo&addonimage are shown @started(23-08-20 21:30) @done(23-08-20 21:55) @lasted(25m16s)
	✔ Browser: 'added-to-hud' status for files in the browser (Consider adding columns or a status bar) @done(23-08-20 21:55)
	✔ Browser: Display custom status for files in the browser (Consider adding columns or a status bar) @done(23-08-20 21:55)
	✔ Browser: Last modified column read from the file like i did in sourcemod editor. Auto sort by this column @done(23-08-20 21:27)
	✔ Bug: Browser: Double click on header -> Some error message shows @done(23-08-20 21:19)
	✔ Browser: Treeview header sorting @done(23-08-20 21:18)
	✔ Browser: gui descriptions failing to load @done(23-08-20 18:58)
		✔ Create an important note with example script:: you can only have one main gui. When using a subgui that should be using tk.Toplevel() otherwise garbage collection causes pyimage errors @done(23-08-20 18:58)
	✔ Browser: Treeview context menu functionality @started(23-08-20 14:15) @done(23-08-20 15:10) @lasted(55m38s)
	✔ Browser: Treeview menu icons @done(23-08-20 14:09)
	✔ General: Add icon buttons to all GUI's @started(23-08-20 11:34) @done(23-08-20 11:35) @lasted(1m8s)
	✔ General: Create custom app.ico @done(23-08-20 11:10)
	✔ General: Add icons to all GUI's @done(23-08-20 11:03)
	✔ Bug: Browser has a visual glitch when starting up. Shows and disappears within a second @done(23-08-20 11:03)
	✔ Remove duplicate code in hud.py related to GuiHudStart instance creation @done(23-08-20 10:38) show_start_gui()
	✔ Testing: Create test for syncer @done(23-08-20 10:29)
	✔ Am I using too many exceptions? When should i return a (None) value instead @done(23-08-20 10:28)

	✘ Bug: Different separators in is_subdirectory even after trying various normpath solutions @low @cancelled(23-08-20 10:24)
	✔ Investigate console errors for failing to load maps @done(23-08-20 10:21) config appending instead of rewriting the editor autoexec

	✔ Address in-game console bugs related to malformed VPK addons loading @done(23-08-20 10:20) using tiny valid vpk's
	✔ Fix 'added' files option not working in treeview, no data retrieved @done(23-08-20 10:20)	
	✔ Bug: Addon title for the debug hud was not retrieved @done(23-08-20 10:16)
	✔ Bug: Addontitle: Exception with invalid format of the addoninfo.txt text file @done(23-08-20 10:16)

	✔ Instead of using game.dir.get create game.installed()? @done(23-08-20 09:52)
	✔ Issue i got personally confused that i should be using self.game.dir.get(DirectoryMode.USER) to check if dev exists @done(23-08-20 09:41)
	✘ Bug: ID handler: Calling ID handler without a dir_mode doesn't raise an error! also check for sync and other methods 'gamez.dir.id.get_installation_state' @cancelled(23-08-20 09:40) (Can't actually do anything with this. Just fix invalid method call)	
	✔ Retrieving installation state for mode that isn't installed returns UNKNOWN should it be UNAVAILABLE or just None instead? @done(23-08-20 09:38)	
	✔ Bug: ID handler: User dev mode is installed -> Get installation state -> Exception has occurred: KeyError @started(23-08-20 08:53) @done(23-08-20 09:10) @lasted(17m53s)
		✔ Get installation state was using the SyncState enum! @done(23-08-24 01:10)
	✔ Test: Sync: restore_developer_directory @done(23-08-20 00:20)
	✔ Sync: Make use of the SyncState enum in the sync class. and in the rest of the script if relevant + modify test @high @done(23-08-19 23:00)
	✔ Sync: Refine error handling strategy in sync class @done(23-08-20 00:18)
	✔ Sync: Cleanup test @done(23-08-19 22:43)
	✔ Handle script closure to ensure unsyncing even during crashes or failures @critical @started(23-08-17 12:04) @done(23-08-19 22:43) @lasted(2d10h39m43s)
	✔ Bad unsync detection: Keep track of sync status in the ID file @done(23-08-17 11:55)
	✔ Installation class: Maintain a backup of key directories @done(23-08-17 11:56)
	✔ When should i check for bad unsync & fix it? Maybe hud.start_editing @started(23-08-17 12:04) @done(23-08-17 13:34) @lasted(1h30m4s)
	✔ Write code to fix bad unsynx @done(23-08-17 13:34)

	✔ Installer: Keep track of installation status @done(23-08-12 17:17)
	✔ Use InvalidIDError @done(23-08-12 15:55)
	✔ Use dir_mode & installation status enum's throughout the game manager @done(23-08-12 15:55)

	✔ minor refactor: I'm passing self to the game subclasses, but since singleton im pretty sure i don't need to @low @done(23-08-17 11:53)
	✔ ^ yes this is needed to avoid important recursion @done(23-08-17 11:53)


	✔ Rewrite from first principles @done(23-08-16 06:00)

	✔ Write dir class @done(23-08-15 20:10)
	✔ Test dir class @done(23-08-15 20:10)
	✔ Write installer class @started(23-08-15 23:54) @done(23-08-16 06:00) @lasted(6h6m51s)
		✔ Write .run() & test syntax used in installer: .run(mode, wait_on_close=True) @done(23-08-16 02:39)
		✔ Refactor: wait_on_process_and_get_hwnd // probably/maybe split into 2 funcs? @done(23-08-16 02:41)
		✔ Test installer class @done(23-08-16 02:42)
		✘ Game: Still allow enabling of user mode or dev mode when the other isn't available(?) @cancelled(23-08-16 02:50)
		Nuh-uh. I need to have access to both game folders
		
		✔ Write uninstall() @done(23-08-16 03:28)
		✔ Bug: Game doesn't rebuild audio @done(23-08-16 04:27)
		✔ Bug: Editor autoexec gets appended to rather than replaced @done(23-08-16 04:27)
		✘ Installer: uninstall() when install gets cancelled or otherwise fails @cancelled(23-08-16 04:36)
		✔ Write update/repair() @done(23-08-16 04:40)
		✘ Refactor: install/update/repair has so much duplicate code! @cancelled(23-08-16 04:57)
		✔ Installer: Re-enable prompts & checks in install() & try:catch @done(23-08-16 04:58)
		
		✔ Implementation: Prompt to manually set the dev directory in hud_editing.start @done(23-08-16 05:02)
		
		✔ Write commands class @done(23-08-16 05:35)
		✔ Test commands class @done(23-08-16 05:35)
		
		✔ Centralize video settings calls into a general function @done(23-08-16 06:00)
		✔ Implementation: Replace & delete the old game instance @done(23-08-16 06:00)

