Post:
☐ Post: Command line: Evaluate potential of using command line interface instead of GUI
☐ Post: decouple classes as much as possible by passing parameters instead of directly referencing other classes
☐ Post: Optimize and improve functions, methods, and overall structure based on GPT suggestions
☐ Post: Unit test: HudDescription
☐ Post: Unit test: ID File Handler

✔ Write installer class @started(23-08-15 23:54) @done(23-08-16 06:00) @lasted(6h6m51s)
	✔ Implementation: Replace & delete the old game instance @done(23-08-16 06:00)
	✔ Centralize video settings calls into a general function @done(23-08-16 06:00)
	
	✔ Test commands class @done(23-08-16 05:35)
	✔ Write commands class @done(23-08-16 05:35)
	
	✔ Implementation: Prompt to manually set the dev directory in hud_editing.start @done(23-08-16 05:02)
	
	✔ Installer: Re-enable prompts & checks in install() & try:catch @done(23-08-16 04:58)
	✘ Refactor: install/update/repair has so much duplicate code! @cancelled(23-08-16 04:57)
	✔ Write update/repair() @done(23-08-16 04:40)
	✘ Installer: uninstall() when install gets cancelled or otherwise fails @cancelled(23-08-16 04:36)
	✔ Bug: Editor autoexec gets appended to rather than replaced @done(23-08-16 04:27)
	✔ Bug: Game doesn't rebuild audio @done(23-08-16 04:27)
	✔ Write uninstall() @done(23-08-16 03:28)
	
	Nuh-uh. I need to have access to both game folders
	✘ Game: Still allow enabling of user mode or dev mode when the other isn't available(?) @cancelled(23-08-16 02:50)
	✔ Test installer class @done(23-08-16 02:42)
	✔ Refactor: wait_on_process_and_get_hwnd // probably/maybe split into 2 funcs? @done(23-08-16 02:41)
	✔ Write .run() & test syntax used in installer: .run(mode, wait_on_close=True) @done(23-08-16 02:39)
✔ Test dir class @done(23-08-15 20:10)
✔ Write dir class @done(23-08-15 20:10)

✔ Rewrite from first principles @done(23-08-16 06:00)


✔ ^ yes this is needed to avoid important recursion @done(23-08-17 11:53)
✔ minor refactor: I'm passing self to the game subclasses, but since singleton im pretty sure i don't need to @low @done(23-08-17 11:53)

✔ Use dir_mode & installation status enum's throughout the game manager @done(23-08-12 15:55)
✔ Use InvalidIDError @done(23-08-12 15:55)
✔ Installer: Keep track of installation status @done(23-08-12 17:17)

✔ Write code to fix bad unsynx @done(23-08-17 13:34)
✔ When should i check for bad unsync & fix it? Maybe hud.start_editing @started(23-08-17 12:04) @done(23-08-17 13:34) @lasted(1h30m4s)
✔ Installation class: Maintain a backup of key directories @done(23-08-17 11:56)
✔ Bad unsync detection: Keep track of sync status in the ID file @done(23-08-17 11:55)
✔ Handle script closure to ensure unsyncing even during crashes or failures @critical @started(23-08-17 12:04) @done(23-08-19 22:43) @lasted(2d10h39m43s)
✔ Sync: Cleanup test @done(23-08-19 22:43)
✔ Sync: Refine error handling strategy in sync class @done(23-08-20 00:18)
✔ Sync: Make use of the SyncState enum in the sync class. and in the rest of the script if relevant + modify test @high @done(23-08-19 23:00)
✔ Test: Sync: restore_developer_directory @done(23-08-20 00:20)
	✔ Get installation state was using the SyncState enum! @done(23-08-24 01:10)
✔ Bug: ID handler: User dev mode is installed -> Get installation state -> Exception has occurred: KeyError @started(23-08-20 08:53) @done(23-08-20 09:10) @lasted(17m53s)
✔ Retrieving installation state for mode that isn't installed returns UNKNOWN should it be UNAVAILABLE or just None instead? @done(23-08-20 09:38)	
✘ Bug: ID handler: Calling ID handler without a dir_mode doesn't raise an error! also check for sync and other methods 'gamez.dir.id.get_installation_state' @cancelled(23-08-20 09:40) (Can't actually do anything with this. Just fix invalid method call)	
✔ Issue i got personally confused that i should be using self.game.dir.get(DirectoryMode.USER) to check if dev exists @done(23-08-20 09:41)
✔ Instead of using game.dir.get create game.installed()? @done(23-08-20 09:52)

✔ Bug: Addontitle: Exception with invalid format of the addoninfo.txt text file @done(23-08-20 10:16)
✔ Bug: Addon title for the debug hud was not retrieved @done(23-08-20 10:16)
✔ Fix 'added' files option not working in treeview, no data retrieved @done(23-08-20 10:20)	
✔ Address in-game console bugs related to malformed VPK addons loading @done(23-08-20 10:20) using tiny valid vpk's

✔ Investigate console errors for failing to load maps @done(23-08-20 10:21) config appending instead of rewriting the editor autoexec
✘ Bug: Different separators in is_subdirectory even after trying various normpath solutions @low @cancelled(23-08-20 10:24)

✔ Am I using too many exceptions? When should i return a (None) value instead @done(23-08-20 10:28)
✔ Testing: Create test for syncer @done(23-08-20 10:29)
✔ Remove duplicate code in hud.py related to GuiHudStart instance creation @done(23-08-20 10:38) show_start_gui()
✔ Bug: Browser has a visual glitch when starting up. Shows and disappears within a second @done(23-08-20 11:03)
✔ General: Add icons to all GUI's @done(23-08-20 11:03)
✔ General: Create custom app.ico @done(23-08-20 11:10)
✔ General: Add icon buttons to all GUI's @started(23-08-20 11:34) @done(23-08-20 11:35) @lasted(1m8s)
✔ Browser: Treeview menu icons @done(23-08-20 14:09)
✔ Browser: Treeview context menu functionality @started(23-08-20 14:15) @done(23-08-20 15:10) @lasted(55m38s)
	✔ Create an important note with example script:: you can only have one main gui. When using a subgui that should be using tk.Toplevel() otherwise garbage collection causes pyimage errors @done(23-08-20 18:58)
✔ Browser: gui descriptions failing to load @done(23-08-20 18:58)
✔ Browser: Treeview header sorting @done(23-08-20 21:18)
✔ Bug: Browser: Double click on header -> Some error message shows @done(23-08-20 21:19)
✔ Browser: Last modified column read from the file like i did in sourcemod editor. Auto sort by this column @done(23-08-20 21:27)
✔ Browser: Display custom status for files in the browser (Consider adding columns or a status bar) @done(23-08-20 21:55)
✔ Browser: 'added-to-hud' status for files in the browser (Consider adding columns or a status bar) @done(23-08-20 21:55)
✔ Bug: Browser: 'All' toggle isn't working right. only addoninfo&addonimage are shown @started(23-08-20 21:30) @done(23-08-20 21:55) @lasted(25m16s)
✔ Add all functionality of the start gui into the editor menu. Remaining: Create/Add hud & dev options menu @done(23-08-20 22:21)
✔ Bug: Try to load any file without controls into the hud descriptions gui -> some error @done(23-08-20 22:33)
✔ Bug: Hud Descriptions Gui: Remove default options for controls @done(23-08-20 22:38)
✔ Browser: Disable multiple instances for the gui descriptions gui @done(23-08-20 22:40) made it a singleton
✔ Browser: Treeview context menu functionality: hud descriptions @done(23-08-20 22:59)
✔ Browser: Treeview context menu functionality: treeview_recycle @done(23-08-21 19:58)
✔ Browser: @icons Treeview context menu icons - fetch from ahk version @done(23-08-21 21:15)
✔ 4. VDF Feature: Sort keys @done(23-08-22 20:50)
✔ 3. String/ VDF Module: Output either with vdf.dump for easiness or as string with added benefits such as properly inserting control descriptions & aligning the key's values on the same indent level @done(23-08-22 21:38)
✔ 2. VDF Module: Load vdf into object and make any changes such as changing the integers @done(23-08-22 17:44)
✔ loop file line by line. find identifier lines. replace the text between double quotes with DELETE_ME or something like that so the file format remains intact and vdf module can delete these @done(23-08-22 17:36)
✔ 1. String: Preprocessing of the file (properly removing xbox360 entries and such, can possibly be quite easy, test removing splitscreen key and then loading into vdf) @done(23-08-22 17:35)
✔ Bug: VDF class didn't handle letter values properly such as "c-150" @done(23-08-22 22:12)
✔ Bug: VDF Modify intergers did not recursively modify so split_screen type key:values werent modified @done(23-08-22 22:17)
✔ Feature: VDF: Undo changes. Either programatically or (more likely) reload from file @done(23-08-23 01:47)
✔ Feature: VDF: Save certain settings for the vdf gui @done(23-08-23 01:14)
✔ Feature: VDF: Proper widget layout. before&after side by side and the controls nicely layed out. Integer modifying should be a self contained lil group of controls @done(23-08-23 01:13)
✔ Bug: VDF GUI: When closing the script goes on to do some stuff: Modifying integer values...Save the modified VDF object to a file @done(23-08-23 01:10)
✔ Feature: VDF: Save window geometry @done(23-08-23 01:09)
✔ Feature: VDF: With annotation disabled the __description__ keys should be removed @done(23-08-23 00:59)
✔ Feature: VDF: Proper before & after comparison @done(23-08-23 00:55)
✔ Sync: Refactor(?) @done(23-08-24 00:36)
✔ Refactor: simplify & improve code (naming) @done(23-08-23 03:17)
✔ Bug: VDF: Confirm file was able to be read properly, if not return @done(23-08-23 03:16)
✔ Browser: Treeview context menu functionality: VDF: Modify @done(23-08-23 03:08)
✔ Feature: VDF: Add support for also deleting entire controls, not just keys as they can also be identifiere'd @done(23-08-23 03:04)
✔ Feature: VDF: Bug: Reset -> DELETE_ME entry is shown? @done(23-08-23 03:04)
✔ Feature: VDF: Verify output validity by using the vdf module to load it before saving/returning @done(23-08-23 02:29)
✔ Feature: VDF: Save option @done(23-08-23 02:29)
	✔ GPT did a great job. looks like i should modify how the class works some to fully support this. for example return data @done(23-08-23 01:55)
✔ VDF: A single gui for modifying the VDF files. All the options such as annotate, integers + text fields with a before & after. + warning about larger (scheme) files + backup in recycle bin @done(23-08-23 01:55)
✔ Refactor. Add method docs @done(23-08-23 01:48)
✔ Bug: Descriptions GUI: Have a file loaded -> open another file -> contents are discarded. should probably  not allow this or do something else @done(23-08-23 16:31)
✔ Feature: Description GUI: Show whether this is a custom file or not @done(23-08-23 15:39)
✔ Feature: Description GUI: Option to remove this file entirely from the description data @done(23-08-23 15:35)
✔ Modify descriptions class to keep track of whether a file is custom. This is useful so i have the option to not show thene when showing 'not added yet' files in the browser @done(23-08-23 15:19)
✔ Refactor: Installer: Use new is_game_files_dir_return_pak01 method @done(23-08-23 14:27)
✔ Refactor: Installer __find_pak_files manually uses pak01_dir.disabled -- the installer class should use the get backup path function @done(23-08-23 13:52)
✔ Bug: Descriptions GUI: Saving contents for a custom hud file causes an error. either allow saving somehow, or disallow them from opening @done(23-08-23 13:38)
✔ Bug: Descriptions GUI: Modify file description -> save -> load same file -> changes weren't actually saved at all @done(23-08-23 13:24)
✔ Descriptions: Add print statements @done(23-08-23 13:17)
	✔ ^ use pycharm. it does support it @done(23-08-23 20:50)
	✔ into the installer which isn't possible. gpt suggested various solutions which seemed maybe possible but seems like something i would leave for later @done(23-08-24 01:10)
	✔ ^ okay, so, gpt says it's deue to the nature of VSCode's static analysises tool and using type hints could fix it. but i need to import the game class @done(23-08-24 01:10)
✔ but in some locations it wouldnt get highlighted such as: installer: self.game.dir.get_main_dir_backup @done(23-08-24 01:10)
✔ for example hud/descriptions/self.game.dir.is_custom_file() works fine @done(23-08-24 01:10)
✔ Bug: Why does VSCode not highlight class in some places but does in others // looks like this is because of me passing game_class to installer manually @done(23-08-23 20:50)

✔ Bug: Installer rebuild_audio couldn't run game (because of fixed bug) but it didn't detect that shit at all! @done(23-08-23 17:27)
✔ Bug: Installer would ignore exceptions and always report the installation as successfull

✔ Test: Installer: New is_game_files_dir_return_pak01 method (install, repair or whatever) @done(23-08-23 16:58)
✔ Bug: game.dir.Set() cancelled because vanilla game dir didn't exist. but that doesnt mattter @done(23-08-23 16:57)
✔ Bug: Installer: Dev was fully installed -> repair dev install -> install created another dev folder? causing issues @done(23-08-23 16:49) they were incorrectly using the current install state
✔ Bug: VDF GUI: The little tk.toplevel() subgui opens real quick when loading the gui @done(23-08-23 16:38)
✔ Bug: VDF gui not loading for hudlayout.res @done(23-08-23 16:36)
✘ Refactor: Rename data manager to persistent data? @cancelled(23-08-23 22:42)
✔ Refactor: Loading&Saving JSON data. Create class & use throughout the program @done(23-08-24 01:11)
✔ Refactor: I'm passing my persistent_data object absolutely everywhere. Create a persistent_data class singleton instead @started(23-08-23 21:34) @done(23-08-23 22:40) @lasted(1h6m54s)
✔ Refactor: GUI: Base GUI class with common functionality for all other gui's to use @done(23-08-23 23:44)
✔ Refactor: In functions.py there are a lot of functions (somewhat vaguely) related to hud stuff it seems like that should could be a class @done(23-08-24 00:31)
✘ Use Super(). This can elimiate the need to for example define self.persistent_data again in subclasses @cancelled(23-08-24 00:32)
✘ Refactor: Private and internal classes dont need param checking, only public @cancelled(23-08-24 00:33)
✔ Added clear messageboxes to installer failures @done(23-08-24 00:35)
✔ Refactor GameDir: Ensure functions like get_main_dir_backup, get_main_dir_backup_materials are used throughout the codebase @done(23-08-24 00:35)
✔ Reevaluate the use of persistent_data in classes, possibly with a dedicated class or alternative approach @done(23-08-24 00:37)
✘ Installer: Add try&except for validate_mode_parameter calls with custom invalid mode param exception to catch @cancelled(23-08-24 00:38)
✘ Break up the game commands execute method for better organization @cancelled(23-08-24 00:45)
✔ Evaluate the use of singleton patterns in GUI management @done(23-08-24 00:45)
✔ Explore restructuring options for more efficient code flow @done(23-08-24 00:45)
✔ Streamline and test HUD editing process for improved code path @done(23-08-24 00:46)
✔ Make the function to create lambda commands a shared utility, and use it in the project @done(23-08-24 00:51)
✔ Replace assert statements with proper error handling using try/catch @done(23-08-24 00:52)
✔ Enums. For example for steam_info object (?) or make it into a class @done(23-08-24 00:53)
✔ Simplify manager class, improve 'get_dir' function and other enhancements @done(23-08-24 00:54)
✔ Utilize exception handling for specific cases like AssertionError and ValueError @done(23-08-24 00:54)
✔ Add dir_mode enum checks to game class? @done(23-08-24 00:54)
✔ Make internal class methods protected by adding underscores. And internal with double __ @done(23-08-24 00:54)
✔ Refactor: use the same two functions for loading/saving data? might cause unnecesary class cluttering. ask gpt @done(23-08-24 00:55)
✔ Refactor: descriptions: Pretty sure it could/should use my general functions for loading/saving data @done(23-08-24 00:55)
	✘ That would simplify some code paths: -- although it seems like that would maybe defeat the single purpose principle? @cancelled(23-08-24 00:56)	
✘ Refactor ID handler: Should i combine the manual selecting of ID path into the get/set functions? @cancelled(23-08-24 00:56)
✔ Refactor GameDir: should get_main_dir_backup check if the directory is valid? or in the code that uses it @done(23-08-24 00:56)
✔ Bug: GUI: I can use show() method for my gui without first having ran the gui's mainloop with run() @done(23-08-24 01:10)
✘ Global hotkey management: Explore using a global singleton hotkey manager to streamline hotkey handling @cancelled(23-08-24 01:11)
✔ Bug: VDF modifier causing infinite loop: GUI VDFModifier > load_file > VDFModifier > loop starts with hud and shit @done(23-08-24 11:08)
✔ Re-enable self.root.title lines @done(23-08-24 11:08)
✔ Modify syntax from self.hud.sync self.hud.desc -> self.hud.editor.syncer @done(23-08-24 11:08)
✔ HudDescriptions is failling because it's importing GuiBrowser & GuiBrowser is failing because? it imports GuiHudDescriptions? recursive? @done(23-08-24 11:08)
✔ Fixed a wide variety of BaseGui & infinite recursion import bugs @done(23-08-24 11:06)
✔ Refactor GameDir: A bunch of duplicate code related to methods like: get_main_dir_backup, get_main_dir_backup_materials @done(23-08-24 12:12)
✔ Feature/Refactor/Bug: I'm currently manually setting the hud_dir, but this should definetly be done with set_dir method @done(23-08-24 11:50)
✔ Bug: Addon images are not in the center of StartGui. Fixed by removing: self.picture_canvas.config(scrollregion=self.picture_canvas.bbox("all")) @done(23-08-24 11:42)
✔ Refactor: ID handler: Consider simpler names? eg: game.dir.id.set_id_path could maybe be just id.set() @done(23-08-24 12:17)
✔ Refactor: editor class. Some notes: start_editing has confusing checks like: if self.syncer.get_sync_status() and self.syncer.get_source_dir() == self.hud_dir and sync_hud @done(23-08-24 12:19)
✔ install_update_repair_duplicate_code_refactor_draft.py @done(23-08-24 16:26)
✔ Refactor: installer's install() repair() update() have a lot of duplicate code. consider my options @done(23-08-24 16:50)
✔ Refactor: remove game_class passing to prompts? by creating an instance in the func @done(23-08-24 16:50)
✔ Bug: Finished installinging! when finished installing @done(23-08-24 16:47)
✔ Installer message boxes for unstalling, repairing, updating installing @done(23-08-24 16:46)
✔ Installer: Onl y prompt to select dev directory, if it wasnt found @done(23-08-24 16:44)
✔ Copy_dir considerations: @done(23-08-24 17:02) result: shutil.copytree needs the destination directory to not exist so it is useful
✘ Installer: also update individual files that get processed into GUI? could be nice if it's easy enough to do. might want to create progress as a class instance, maybe @cancelled(23-08-24 18:20)
✔ Installer: Incorporate progress GUI for the installer class: unstalling: individual files (only if feasible, depends on gpt) @done(23-08-24 18:20)
✘ Bug: Installer gui Progressbar doesn't update without mainloop() if mainloop() is used for another gui @cancelled(23-08-24 18:19) <- Tried threading but that doesn't work just not using progressbar	
✔ Installer: Incorporate progress GUI for the installer class. __process_installation_steps: just easy peasy each step @done(23-08-24 17:50)
✔ Feature: Closing the installer progress gui should cancel installation? reset installation state? @done(23-08-24 17:50)
✔ Bug: Cancelled installation halfway through for example 'VERIFYING_GAME' -> id file exists -> install dev -> asks to select id file when though id file exists @done(23-08-24 17:48)
✘ Feature: Installer: Hide start gui during installation/uninstall procedures, confirm that doesn't cause an issue with the progress gui @cancelled(23-08-24 23:25)
✔ Feature: Installer: Check whether the developer directory is out of date by comparing the (some) pak files @done(23-08-24 23:22)
✔ Refactor: Clean duplicate code for looping game folder. in is_custom_file & out_of_date check @done(23-08-24 23:14)
✔ Bug: Installation cancelled because of a bug -> terminal says finished installing! @done(23-08-24 22:57)
✔ Installer: Minor logic improvement @done(23-08-24 22:55)
✔ Bug: Installation cancelled because of error -> bug only prints in console, but should be a message @done(23-08-24 22:50)
✔ Bug: When resuming installation state the GUI still contains total_steps as if starting for 0. either modify total steps or count which step i'm on in total probably the second @done(23-08-24 22:45)
✔ Bug: Installation step error: GameDir._get_main_subdir() missing 1 required positional argument: 'subdir_name' @done(23-08-24 22:31)
✔ Bug: Installer updates step after completing it instead of before @done(23-08-24 22:27)
✔ Feature: Installer: I should use uninstall() in the other place in the installer where it deletes the dev dir. actually; create a separate method for deleting a folder and use that for uninstall() and in common_installation_logic @done(23-08-24 22:12)
✔ Feature: Installer: Considering directory deletion takes a while, i should  update installation state to prending_deletion or some such and use that in the script @done(23-08-24 22:09)
		✘ it then suggested removing the <configure> bind during updating. but because update triggers so often that doesn't work @cancelled(23-08-25 15:24)
		✘ Tried this for a lil while. doesn't seem possible. gpt came up with binding <Configure> which hits when user resizes, but also when root.update() resizes, @cancelled(23-08-25 15:24)
✘ progress gui: can i stop automatic resizing when i manually resize? + at that point change minimum width to a smaller size to allow resizing @cancelled(23-08-25 15:24)
✘ Feature: VPK: Handle VPK class failing to extract specific files during installation. Right now they are just printed. @cancelled(23-08-25 15:34) Not doing this because it's not important. maybe 1 or 2 very minor files will fail to extract
	✔ The reason is that when a custom hud file is synced it could currently get reported as default. if synced i would need to check if a .backup version exists, if not its custom @done(23-08-26 20:17)
✔ Refactor: is_custom_file should probably take into account whether a hud is synced? or disable it if a hud is synced as i intend to only use it when adding new files? @done(23-08-26 20:17)
✔ Refactor: Browser: Show all hud files -> a shit ton of calls to look up various info causing unnecesary slowdown @done(23-08-26 20:58)
✔ Refactor self.hud.edit.desc doesn't make too much sense. move it to hud.desc. @done(23-08-26 20:58)
✔ Refactor: is_custom_file finds the first possible match of the default file in the dev folder. use this throughout the script (probably just for the browser open default file) & rename method accordingly @done(23-08-26 20:19)
✔ Refactor: @idea My GUIS should maybe have a top level parameter for debugging and just generally makes it a bit clear what is happening? @done(23-08-26 20:01)
✔ Feature: Start GUI: Export as directory option @done(23-08-26 18:04)
✔ Feature: Start GUI: Also use images for the context menu @done(23-08-26 17:07)
✔ Feature: Start GUI: The remove button should have a confirmation dialog weather to remove it from the disk as well @done(23-08-26 17:01)
✔ Feature: Start GUI: Niceify @done(23-08-26 16:40)
✔ Feature: Start GUI: Use the exact same variables voor de context menu and The Buttons for the images @done(23-08-26 16:40)
✘ Feature: Start GUI: The add button should be called open instead and change the Icon to the open Icon Arrow @cancelled(23-08-26 15:15)
✔ Feature: Start GUI: Make edit&addonimage into a panel that sits in the bottom right of the gui @done(23-08-26 15:14)
✔ Feature: Start GUI: Add buttons for all context menu options(?) remove/open_dir/save_as_vpk // would have to check/change status on whether a hud is selected + edit button should, too @done(23-08-26 15:14)
✔ Feature: catch specific exception of the progress gui closing during installation -> display a nicer infobox message @done(23-08-26 14:58)
✔ Feature: installer progress gui close confirmation box. Could be achieved by making the progressGU into a baseProgressGUI which extend from baseGUI and then create another gui to extend from BaseProgress @done(23-08-26 14:57)
✔ Bug: Progress gui step 1 seems to be cut off with three dots "..." then step 2 resizes the gui to where it should be @done(23-08-26 14:44)
✔ Bug: Progress gui is being side to wide as fuck by default. seemingly ignoring initial_width @done(23-08-26 14:38)
✔ Bug: Error when the start gui opens the browser gui @done(23-08-26 14:07)
✔ Bug -> full settings json -> open start gui by opening it with debug_start_gui() -> close start -> json is compltely empty @done(23-08-26 13:49) issue was using self.get_window_geometry without the ()
✔ Bug: Empty settings -> load start -> error because no huds are available @done(23-08-26 13:34)
✔ Feature: Start GUI: Remove menu bar -- button should open that context menu instead @done(23-08-25 16:17)
✔ Refactor: Start GUI: Class @done(23-08-25 15:50)
✔ Refactor: Duplicate code: game.dir has code related to finding pak01's but the installer does aswell @done(23-08-25 15:47)
✔ Refactor: VPK: VPK class @done(23-08-25 15:31)
✔ Bug: When deleting game dev installation the gui gets resized a lot by the different length paths causing it to flicker and visually glitch out some @done(23-08-25 00:14)
✔ Feature: Have a method to check validity of the installation directories by verifying that they exist and only have version aka id file in the entire steam directory @done(23-08-26 23:33)
✔ Refactor: Add certain check during script startup so they don't have to be done anywhere else @done(23-08-26 23:50)
✔ Feature: Start GUI: Context menu icons @done(23-08-26 23:53)
✔ Feature: Start GUI: Specific button icons rather than all identical @done(23-08-26 23:53)
✔ Bug -> break the json -> terminal resetting settings -> failed to save data to file @done(23-08-27 00:08)
✔ Bug -> Break the json -> start program -> dialog resetting settings -> pyimage10 doesn't exist error inside of start gui @done(23-08-27 00:10)
✔ Feature: Settings: Add default values for settings. Do this in such a way that if Get() fails to retrieve value, look it up from the default value data & load() uses it as a default @done(23-08-27 00:10)
✔ Bug: todo plugin not finding embedded todo's? TODO @done(23-08-27 00:13)
✔ Refactor: Indicate that deleting files through the browser sends them into the trash @done(23-08-27 00:14)
✔ Bug: Browser: Every file is reported as not a custom file @done(23-08-27 00:32)
✔ Bug: Browser: Double clicking anywhere registers, including the header! @done(23-08-27 00:42)
✔ Refactor: app-icons repo. delete unnecesary dimensions & all other things @done(23-08-27 01:14)
✔ Refactor: IMAGES directory @done(23-08-27 01:50)
✔ Bug: editor menu -> show panel doesn't seem to take selected panel into account at all? doesnt toggle anything @done(23-08-27 12:22)
✔ Feature: editor menu -> Show set coords in the menu @done(23-08-27 11:55)
✔ Feature: Added ImageConstants class @done(23-08-27 12:41)
✔ Bug: VDF gui doesn't load. atleast for hudlayout.res @done(23-08-27 14:21)
✔ Bug: VDF GUI always defaulting geometry when loaded through browser @done(23-08-27 14:29)
✔ Menu: @icons  Add icons @done(23-08-27 16:32)
✔ Menu: @icons  Test: Do toggleable menu options support icons in any way or state? @done(23-08-27 16:32)
✔ Bug -> If i open browser without loading a hud instance first. i get an error. it's fine when i first do hud_inc = get_hud_debug_instance() @done(23-08-27 17:08)
✔ Bug: Browser -> Open start gui -> errors. This is most likely because i only create widgets once. and its a singleton @done(23-08-27 17:08)
✔ Bug -> Browser -> Open start -> Starts debugging the process gui?!. Even funnier. it doesn't happen when debugging step by step @done(23-08-27 17:17) was dueue to some caching issue. fixed by reloading vscode
✔ Editor menu: Add all start GUI functionality. We're almost there already. for example i can add but not create new huds @done(23-08-27 17:23)
✔ Refactor use the image constants class everywhere @done(23-08-27 17:23)
✘ Post: Already tried this for an hour. But a way to retrieve the OS's default icon for a file path to be used in the treeview @cancelled(23-08-27 17:43)
✘ Pull some workshop map off of steam to use for L4D2. And possibly a map for L4D1 @cancelled(23-08-27 17:43)
✘ Bug: Currently the game gets bound to the python process, and also closes if the script closes @impossible? (note that outside of debugging this more or less isn't an issue, or maybe even a feature) @cancelled(23-08-27 17:44)
✘ Seemingly impossible although apparently it is possible: Run a process detached from python @cancelled(23-08-27 17:44)
✘ Note: Running the game before starting the editor works fine. @cancelled(23-08-27 17:44)
	✘ so could use a script to launch it and then the editor @cancelled(23-08-27 17:44)
✘ I was able to get it to work with notepad.exe using subprocess start /B notepad.exe, @cancelled(23-08-27 17:44)
✘ however that didn't work for the game or steam @cancelled(23-08-27 17:44)
✘ this is legitimately around 2 hours of trail and error: python_process_decouple_testing.py @cancelled(23-08-27 17:44)
✔ Bug: Popup doesn't seem to work right. It doesn't get hidden by default and doesn't seem to actually reference basegui even though it is by code @done(23-08-27 18:27)
✔ Feature: i'll have to make a class to work with the 3 different main GUI's. or maybe make the popup thing work as toplevel @done(23-08-27 18:27)
✔ Feature: Can i find a way to show a context menu which closes then losing focus using python? Can try to get Tkinter to work & maybe other frameworks @done(23-08-27 18:28)
✔ Pretty sure i have the solution: When pressing the 'show context menu' hotkey. you show the gui first, because clicking on the gui closes the menu just fine. should cover the entire screen @done(23-08-27 18:28)
✔ And optionally (almost) transparent. then close/hide the gui again when menu closes / keypress is detected on the gui @done(23-08-27 18:28)
✔ Feature: Separate method to create 'Parent menu' with or without images based on whether it's being added to a context menu or menubar (menubar doesn't support images) @done(23-08-27 18:28)
✔ Feature: Browser: Treeview context menu toggle entries based on availablility? eg. default item might not be available self.menu_bar.entryconfig("Hud", state="disabled") @done(23-08-27 18:28)
✔ Feature: Fixed weird little gui from showing up when creating BaseGUI tktoplevel without a gui opened already @done(23-08-27 20:35)
✔ Feature: Made HudDescriptions gui a singleton @done(23-08-27 20:37)
✔ Feature: Add hotkey for contexte menu popup gui to help menu @done(23-08-27 20:54)
✔ Feature: Create hotkey for showing the context menu @done(23-08-27 20:54)
✘ Feature: Browser: Status bar showing 'custom' & 'added-to-hud' status? @cancelled(23-08-27 21:03)
✘ Bug: Show_browser_gui() ->  can't invoke "event" command: application has been destroyed // this also happens for show_start_gui @cancelled(23-08-27 21:08)
	✘ doesn't happen when showing start (so destroying browser) @cancelled(23-08-27 21:08)
	✘ doesn't happen when delayed by input() @cancelled(23-08-27 21:08)
	✘ not even an issue @cancelled(23-08-27 21:08)
	✘ could maybe separate creating widgets from init, and creat them when showing (only once) @cancelled(23-08-27 21:08)
✘ Refactor: too-many-lines in menu.py @cancelled(23-08-27 21:19)
✔ Bug: The program is saving GUI position when it's coordinates couldn't be retrieved. Start but probably others // seems to happen when starting up the program? @done(23-08-27 22:33)
✔ Bug: Popup menu should be part of browser @done(23-08-27 23:28)
✔ Bug: Hotkey for showing editor menu isn't working // could be that when start/browser is destroyed that shit gets destroyed @done(23-08-27 23:28)
✔ Bug: Hotkey for toggling browser doesn't work at all @done(23-08-27 23:28)
✔ Bug: Start eiditing -> Close game -> editor.__set_hud_info() error: NoneType @done(23-08-27 23:28)
✘ #py BaseGui should could probably have mandatory root param root_or_toplevel? @cancelled(23-08-28 13:46)
✘ #Py Could should i make browser a child of start gui? @cancelled(23-08-28 13:51)
	✘ Pros: You can create multiple windows in your application, each with its own widgets and options. You can also control the appearance and behavior of each window separately, such as title, icon, geometry, etc. @cancelled(23-08-28 13:51)
	✘ Cons: You need to manage the communication between the windows, such as passing data or events. You also need to handle the cases when the user closes one window but not the other. @cancelled(23-08-28 13:51)
	✘ ^ not doing this because added complexity and barely if any benefits @cancelled(23-08-28 13:51)
✘ #Py Look up some professional tkinter base guis @cancelled(23-08-28 14:09)
✔ Refactor: Use proper toplevel on UserInputWindow @done(23-08-28 15:06)
✔ Refactor: Document behaviour about how TopLevel should be used to prevent calling from TLC @done(23-08-28 15:06)
	✔ It comes down to only one main mainloop() being allowed. other TopLevel mainloops need to be based from of the first one @done(23-08-28 15:06)
✔ Refactor: Cleanup BaseGui/Browser related code to topLevel @done(23-08-28 15:06)
✔ Refactor: Cleanup todo's related code to topLevel @done(23-08-28 15:06)
✔ Toplevel windows don't need their own mainloop() because they are managed by the main application's event loop @done(23-08-28 15:06)
✔ Feature: Scale popup gui to the window's full size on right startup // also where is it being done right now? a bit slow? @done(23-08-28 15:06)
✔ Refactor: toplevel should receive parent. replace is_modal_window with parent_instance. keep the tk.tk() thing to hide the weird gui but only if parent doesn't exist or something @done(23-08-28 15:06)
	✔ top_level_window = tk.Toplevel(self.root) @done(23-08-28 15:06)
✔ Bug: Browser popup hotkey -> terminal says : Running GUI Editor Context Menu Popup & error shows, every consequent context menu show after that no problem @done(23-08-28 15:07)
✔ Bug: When toggling browser visibility i get a  bunch of errors in my terminal @done(23-08-28 15:07)
	✔ same with opening the popup menu @done(23-08-28 15:07)
	✔ basegui.py disabling mainloop() (if hidden/modal) works @done(23-08-28 15:07)
	✔ ^ might be that i'm, oh, uh, i'm doing mainloop() on every window show() which is probably not great @done(23-08-28 15:07)
✔ Refactor: Split GUI creation into smaller methods like create_widgets>create_treeview&create_context_menu @done(23-08-28 15:51)
✔ Refactor: Editor: start_hud_editing - ask GPT, a lot of duplicate code @done(23-08-28 15:57)
✔ Refactor: Editor: finishg_hud_editing? @done(23-08-28 15:57)
✔ Bug: Use browser context menu option without anything selected. Could be modified by not showing the context menu if nothing selected @done(23-08-28 16:05)
✔ Bug: main.pyw doesn't seem to do anything when running through normal file explorerer @done(23-08-28 20:15)
✔ Feature: developer menu: add confirmation for enable/disable aswell. @done(23-08-28 20:20)
✔ Feature: developer menu: add text labels explaining more information @done(23-08-28 20:49)
✔ Bug: Context menu popup -> Show installer menu -> Enable user/dev mode -> infobox shows behind the gui @done(23-08-28 20:49)
✔ Feature: on script exit disable dev mode @done(23-08-28 20:50)
✔ Feature: developer menu: instead rename enable/disable to maybe more descriptive and/or increase understandability with label so: user mode: dev mode @done(23-08-28 20:50)
✔ Bug: Browser not refreshing when opened @done(23-08-29 00:25)
✔ Bug: Syncer trying to unsync 'None' hud on new program start after restoring backup files-- This happens because is_synced gets sync state from disk. but the hud won't be loaded in @done(23-08-29 00:25)
✔ Bug: Descriptions gui -> save -> image errors. could be garbage collection or otherwise? @done(23-08-29 00:25)
✔ Refactor: Toggle most/all print statements in a class eg: hud descriptions. Can be done with logging. @done(23-08-29 00:25)
✔ Refactor: Make start gui the main gui and browser a subgui? apparently it really is best practice to have 1 main gui @done(23-08-29 00:25)
	✔ OR: Refactor: Make a little class to run the two main GUI's: Start & Browser @done(23-08-29 00:25)
✘ Modify browser on_close to go back to the start gui @cancelled(23-08-29 00:26)
✔ Bug: Seemingly, the backup files are restored every single time on game start right nows @done(23-08-29 00:26)
✔ Bug: Execute Reload fonts game command -> Game sits in middle of desktop again & is not restored to its saved position @done(23-08-29 00:59)
	✔ Executed command: 'hud_reloadscheme; ui_reloadscheme; mat_reloadallmaterials; mat_setvideomode 1 1 1 0;mat_setvideomode 640 480 1 0; wait; showpanel None' @done(23-08-29 00:59)
✔ Bug?: F7 to toggle browser visibility works when used during start gui being open. but when editing it doesn't @done(23-08-29 00:59)
✔ Bug?: Browser & editor menu hotkeys work right away. not only while browser is visible @done(23-08-29 00:59)
✔ Feature: Browser closing should have a confirmation dialog about are you sure @done(23-08-29 01:05)
✘ Feature: Global hotkey manager: Method to set up global (debug) hotkeys seems pretty useful right now to say the least. @cancelled(23-08-29 17:32) tried some hotkey manager solution seemed confusing and unnecesary
✔ Feature: Add progress GUI for 'restoring dev game files' @done(23-08-29 17:59)
✔ Refactor: Cleanup redundant print statements @done(23-08-29 18:01)
✔ Feature: Menu: Set Reload hud functionality // result = data_manager.get("game_mode") result = data_manager.set("game_mode", value) @done(23-08-29 18:29)
✔ Feature: Menu: Reload hud 'once' functionality @done(23-08-29 18:29)
✔ Feature: Hide the browser after having opened file. And maybe other options. probably not right now. @done(23-08-29 18:29)
✘ Feature: Modify move window to position code? Idea: Add padding param which is used to move game away from the border by specified amount. Could just be unnecsary complexity. Just set save custom position @cancelled(23-08-29 18:39)
✔ Feature: Right now the sync hud hotkey literally just syncs files. it needs to be bound to a method hat will also reload changes ingame based on settings (check if code for this already exists in the program) @done(23-08-29 18:40)
✘ Feature: Sync hud hotkey is set to ctrl+s. Do i want to change this? @cancelled(23-08-29 18:40)
✘ Refactor: Duplicate code: handler/editor_show_menu_panel directorly runs reload mode? self.game.command.execute(self.data_manager.get("hud_reload_mode")) @cancelled(23-08-29 18:41)
✘ Bug: Browser: Move game position -> game is now focused. Behaviour should be cursor remains in the same place & focus is the same as before @cancelled(23-08-29 18:28) false positive
✔ Bug: "game_pos": "Custom (Save)", doesn't get handled right by window.restore_saved_position. tuple is stored game_pos_custom_coord @done(23-08-29 19:09)
✔ Bug: Commands: reload_all -> game gets reset to saved position but the focus will not have been restored to the previous window but game will be focused @done(23-08-29 19:42)
	✔ Okay so the command is definetly executed without focusing the game. Just that reloading the resolution apparently captures the mouse focus. Detect reload_all/reload_fonts or better yet mat_reloadresolution thingy @done(23-08-29 19:42)
	✔ Detect mat_setvideomode and wait until the game has finished processing. or just artificually sleep for a second or so @done(23-08-29 19:42)
	✔ i checked the AHK code for this and it has a note: when executing (some) menu commands the active window will be 0x0 presumably because the menu was active @done(23-08-29 19:42)
	✔ HUH turns out focus is being set correctly. it's just the game bugging out and still having focus of the mouse input. window focus is set perfectly @done(23-08-29 19:42)
	✔ Game is also acting buggy. When i alt-tab it says focused. only when i manually focus the game window and then alt tab it finally loses mouse focus @done(23-08-29 19:42)
	✔ Solution: first manually focus the game. and then the saved focused_hwnd @done(23-08-29 19:42)
✔ Feature: class to save mouse position & focus hwnd & restore it @done(23-08-29 19:57)
✔ Bug: built-in todo app doesn't detect this in shared_utils.py: print(f"FIXME TODO move_hwnd_to_position: position={position}") @done(23-08-29 21:17)
✔ Feature: Create a way to sync without restoring the developer directory @done(23-08-29 21:18) write sync status id file
✔ Feature: Menu: Reload modes menu should have checkboxes on them for which mode is currently selected @done(23-08-29 21:39)
✔ Refactor: Class to work with hwnds. Make it a shared util. All the current methods for working hwnds. Including focus saving&restoring @done(23-08-29 22:59)
	✔ move_hwnd_to_position @done(23-08-29 22:35)
	✔ is_process_running_from_hwnd @done(23-08-29 22:56)
	✔ focus_hwnd @done(23-08-29 22:59)
✔ Bug: Menu: Unsync hud -> AttributeError: 'Hud' object has no attribute 'unsync' @done(23-08-30 11:49)
✔ Feature: Menu: File -> Open file browser @done(23-08-30 11:55)
✘ Feature: Menu: Popup should refresh the menu before opening it(?) then again the menu options already do it @cancelled(23-08-30 11:58) making editor menu handler class instead
✔ Feature: A lot of print statements Process left4dead2.exe is running when startgui->start editing? Analyze & move to logging @done(23-08-30 12:34)
✔ Feature: Hotkey manager! @done(23-08-30 13:21)
✔ Bug: Sync hotkey is also sending ctrl+s but instead its typing an 's' in vscode @done(23-08-30 13:43) issue was the code execution taking too long causing issues with the keyboard hotkey module
✘ Bug: Menu: File -> Open file browser errors (without start gui having showed first, however) // this also happens for start. something slightly sus going on. something to do with the popup gui being showed first no doubt. confirm this is the case, and add a try:catch exception to the handler and/or maybe use the mainloop() check options with show_message explaining what's up @cancelled(23-08-30 13:48) non-issue just start mainloop() first
✘ Feature: Hotkey Manager: Run every hotkey in a thread @cancelled(23-08-30 14:49) possible, but then they can't be supressed anymore
✔ Feature: Editor Menu Handler class which will refresh the editor menu after every call @done(23-08-30 15:13) accomplished with decorators
✔ Refactor: Progress & Splash GUI's should inherit from basegui @done(23-08-30 17:58)
✘ Refactor: Use BaseGUI for get_mouse_position_on_click @cancelled(23-08-30 18:03) nuh-uh
✔ Feature: Menu: Open in VSCode: VSCode icon @done(23-08-30 18:10)
✘ Post: Multi-game support: Explore multi-game support feasibility: Check how much extra code was required. If too much, not worth it. Only if it's very easy @cancelled(23-08-30 19:44)
	✘ I used GAME_CLASS.obj.version to check it && 1 method in game class to set specific variables @cancelled(23-08-30 19:44)
	✘ Where is SwapFoldersTo called from? If !GAME_CLASS.DevMode.Enable() @cancelled(23-08-30 19:44)
	✘ ^ okay so i'm noticing that i have been writing pretty good code which should mean that it might actually be trivial to add l4d1 support. it's mostly the editor menu needing various different options @cancelled(23-08-30 19:44)
	✘ 		for example i used to hardcode left4dead_dlc1 etc but now i just search the folders @cancelled(23-08-30 19:44)
	✘ Conclusion: it should be very easy to do. but i'm still not going to do it because it makes no sense @cancelled(23-08-30 19:44)
✔ Post: Add types: Make a good GPT prompt @done(23-08-30 21:37) works but too much effort to do after the fact
✔ Testing: Get the AHK version working and check it out to confirm feature parity @done(23-08-30 22:02)
✔ Feature: Readme.md -> add ahk version's readme.md with maybe some (formatting) improvements @done(23-08-30 22:04)
✔ Feature: Modify the videosettings class thing so that it can handle the file being broken? by using some default values or something @done(23-08-31 00:22)
✔ Bug: Menu: Change game resolution -> Game has focus of the mouse&keyboard @done(23-08-31 00:16)
✔ bug: update game command gui @done(23-08-31 00:20)
✔ Bug -> editor menu -> installer -> repair -> dev mode is not installed. but is is. with valid id file and all @done(23-08-31 00:38)
✔ Bug: Progress gui not showing @done(23-08-31 00:52) fixed with .show()
✔ Bug: Installer closing progress gui instead of destroying @done(23-08-31 09:00)
✔ Bug: Repairing error one small vdf file extract cancels all @done(23-08-31 09:19) raising specific file extarcting error and catching it
✔ Bug: Installer: Starting the installer @ repairing still has all the 7 repair steps instead of the reminaing ones @done(23-08-31 10:11)
✔ Bug: Installer: When repairing the progress gui still says installing @done(23-08-31 10:13)
✔ Bug: Installer: Repairing finishes properly: tries to destroy progress gui but is already destroyed which causes error @done(23-08-31 10:35)
✔ Bug: Installer: During extracting vpk's the program freezes and doesnt detect l4d2 closing when i manually close l4d2 @done(23-08-31 18:50)
✔ Feature: hwnd window manager needs a static method to check if hwnd is valid for various methods such as running() focus() move() and such @done(23-08-31 18:57)
✔ Bug: Run game is taking waay to long when rebuilding audio cache. it seems to wait until l4d starts 'responding'? @done(23-08-31 18:57)
✔ Feature: I have too many loose functions, still, even with hwnd_tools class. a lot of overlap between them too. probably add wait until process runs and have that colltect HWND so i dont have to do it multiple times @done(23-08-31 19:00)
✔ Feature: Move wait_process_close into hwnd_utils? @done(23-08-31 19:46)
✔ Feature: Can i modify the hwnd class so that it saves data for a hwnd? for example when i get a hwnd automatically look up the executable name too and assign that to it @done(23-08-31 20:43)
✔ Refactor: create_temp_dir_from_input_dir_exclude_files_without_extension @done(23-08-31 21:52)
✔ Feature: Write my own VPK extract/create class. Creaton: the VPK module doesn't handle left4dead2_dlc3 properly and the way it is coded you can't suppress the error and continue extracting. it just stops extracting @done(23-08-31 21:52)
✔ Feature: method to confirm validity of the dev folder. all pak01's should be disabled. merge this code into overcouples method for validiety checks @done(23-08-31 22:34)
✔ Refactor: Modify copy_dir to ignore file extensions(?) @done(23-08-31 22:41)
✔ Bug: start editing hud -> open hud file -> modify it -> sync -> no changes ingame. hud is being reloaded ingame @done(23-08-31 22:42) pak01's were enabled
	✔ Refactor: Remove __extract_outdated_paks? @done(23-08-31 22:51)
✔ Refactor: ProgressGUI: Add logging @done(23-08-31 22:59)
✔ Refactor: Better naming for logging manager & logger variable? @done(23-08-31 23:01)
✔ Bug: Start -> Edit hud -> Browser does not have the hud loaded (it does load when i manually do something like reload it) @done(23-09-01 10:22)
✘ Bug: Start -> Edit hud -> hud.syncer is trying to sync 'VideoConfig'? as in the object? @cancelled(23-09-01 10:24) doesn't do it right now
✔ Bug: VDF -> Annotate -> can't add or reetrieve descriptions. i had a file with Resource\Hudlayout.res // do i want to write code to look for the resource file in the resource folder? // do i want to use the file's location in the actual hud instead? or both? @done(23-09-01 11:09)
✔ Feature: game.dir.find_resource_file @done(23-09-01 11:34)
✔ Modify the hud descriptions class to use file_name as indicator @done(23-09-01 16:23)
✔ Feature: game.dir.find_resource_file -> game.dir.get_file_relative_path // wait, do i even need this function? doesn't browser already do this? @done(23-09-01 16:47)
✘ Feature: Verifying file_relative_path before adding it to description data by comparing input file relative path & relative path in the actual file header. throw error if problematic @cancelled(23-09-02 04:40) all files are in there not just resource files. also fuck whatever the file header says
✔ Context menu Hot Key solution for disabling other hotkeys: only open the guinif it currently isnt showing. And/orbdestroy and recreate it @done(23-09-02 05:27)
✔ Feature: Geometry saving & loading for descriptions gui @done(23-09-02 05:40)
✔ Feature: Geometry saving & loading for vdf gui @done(23-09-02 05:41)
✔ Feature: Geometry saving & loading for remaining main gui's @done(23-09-02 05:41)
✔ Issue: VDF GUI used resource\hudlayout.res (from header) to retrieve hud description which is invalid because its scripts\hudlayout.res @done(23-09-02 05:42)
	✔ Thought: Should i not rely on the resource header at all? or rely on it entirely @done(23-09-02 05:42)
	✔ ^ i should compare the file name to the file name in the resource header. if these don't match up throw an error @done(23-09-02 05:42)
	✔ ^ i should use this verified file name to look up the resource path and save it in hud desc @done(23-09-02 05:42)
	✔ ^ hud desc should do all of this. that should be the only location where the data is modified in any way @done(23-09-02 05:42)
✔ @done(23-09-02 05:42)
	✔ ^ should i still use relative file path to save data? or name? does it even matter? i could write code to do either, relative path seems a bit better @done(23-09-02 05:42)
		✔ ^ relative path is arguably worse because when looking up hudlayout.res from some random location it wouldn't work right @done(23-09-02 05:42)
	✔ @done(23-09-02 05:42)
	✔ ^ notes. not every file has a file header. @done(23-09-02 05:42)
	✔ @done(23-09-02 05:42)
	✔ @done(23-09-02 05:42)
	✔ Feature: Do i want to modify my descriptions json structure? Save relative path as a subkey found with the function i just created. seems better in many ways actually. then add a method for retrieving relative path @done(23-09-02 05:42)
	✔ ^ in fact, i probably don't even need relative path at any one point? @done(23-09-02 05:42)
	✔ ^ definetly do this @done(23-09-02 05:42)
	✔ Bug: Hotkeys: Hotkeys randomly stop working. F8 to open the editor menu -> press close option -> hotkeys stop working. so instead of do_nothing it should destroy the gui? @done(23-09-02 05:42)
		✔ ^ well, if needed, could always disable entirely. or have some way to reset the hotkey in the class or ask gpt etc @done(23-09-02 05:42)
✔ @done(23-09-02 05:42)
		✔ ^ so, it's definetly caused by the popup gui hotkey. if the hotkeys stop working, and i show and hide the popup gui again, the hotkeys continue working just fine @done(23-09-02 05:42)
	✔ Bug: Hotkeys: Pressing the show editor menu hotkey while the editor menu is shown causes the show browser hotkey to stop working entirely @done(23-09-02 05:42)
✔ Bug: Desc -> HudWeaponSelection is missing? didn't i have this registered before? @done(23-09-02 05:44) nope, checked ahk
✔ Bug: Logging with log.debug() causing an error @done(23-09-02 05:49) using log.debug(" ")
✔ Bug: Installer: ProcessGUI being behind StartGUI @done(23-09-02 05:52) set to always on top
✔ Feature: Cleanup main debugging file by moving methods to separate files and keeping main() as it should be, just delegating @done(23-09-02 15:32)
✔ Feature: Installer: Update verify games prompt. as it's outdated. maybe add a timestamp for when instruction were written @done(23-09-02 15:44)
✔ Feature: Installer: Clear 'exit' from valve.rc after finishing -- infact just write my proper config as sv_consistency 0 is needed too @started(23-09-02 15:44) @done(23-09-02 15:46) @lasted(2m10s)
✔ Feature: DevMenu: indicate which mode is currently activated. aka in the 'vanilla' path. either by disablig and/or additional entry @done(23-09-02 16:15)
✘ Feature: DevMenu: Run game option(?) @cancelled(23-09-02 16:21)
✔ Feature: Modified BaseGUI.show() to allow for a callback to be able to open a sub gui for debugging after mainloop() @done(23-09-02 16:53)
✔ Feature: Browser: Can i modify the shortcut 'control' of the gui? So pressing tab would switch from text input to the treeview. and maybe vice-versa? @started(23-09-02 17:07) @done(23-09-02 18:00) @lasted(53m)
✔ Feature: BaseGUI: Toggle visibility should focus the gui & bring it to front @done(23-09-02 18:03)
✘ Refactor: Browser: Move create widgets to separate file? @cancelled(23-09-02 18:09)
✔ Feature: BaseGUI: Show() should focus the gui & bring it to front // test with the installer & remove always_on_top if possible @done(23-09-02 18:09)
✔ Bug: BaseGUI: Set browser to always on top true -> debug_browser_gui() -> not always on top @done(23-09-02 20:31)
✔ Feature: Browser: Add those large buttons to the browser that indicate the hotkeys that are available just like on my content editor, eg: syncing,browser toggling,editor menu popup @started(23-09-02 18:29) @done(23-09-02 20:57) @lasted(2h28m7s)
✔ Feature: BaseGUI: Show menu on button @done(23-09-02 22:07)
✔ Feature: Start: Closing start gui should close the program + activate user mode, most likely @done(23-09-02 22:09)
✔ Feature: Browser: Verify what close does right now and what i would like it to do + activate user mode, most likely @done(23-09-02 22:27)
✔ Feature: Todo: Import todo's from microsoft todo @done(23-09-02 22:27)
✔ Bug: Installer: Uninstall: Uninstall dev mode -> try to open editor menu dev installer menu -> error about can't disable menu item @done(23-09-03 11:05)
✔ Bug: Installer: Install -> user ID file isn't deleted from dev directory @done(23-09-03 11:15)
✔ Bug: VPK/installer: Extracting with l4d2_vpk.exe: A lot of textures on l4d1 maps are messed up. This is because left4dead2_dlc3 needs to be extracted with l4d1 vpk.exe -- just exctract everything with l4d1.exe like i did for the ahk version @done(23-09-03 12:14)
✔ Testing: Can i detect corrupted extracted vpk files? Debugging idea: Extract with all the different methods, l4d1, l4d2, nosteam (old l4d1), vpk module. then compare. Info: nosteam apparently extracts every pak01_dir.vpk correctly while the steam versions mess up almost everything, and vpk module left4dead2_dlc3 @done(23-09-03 12:25)
	✔ Good testing file, try opening: materials\ads\ad01.vtf this will fail if corrupted @done(23-09-03 12:25)
	✔ I could maybe do something with capturing output from running vpk.exe @done(23-09-03 12:23)  result code is 0 so it doesnt detect any errors!
	✔ I could maybe do something with different vpk.exe commands like list files or something @done(23-09-03 12:25)
	✔ I could maybe try copying the rest of the bin folder to see if it makes a difference @done(23-09-03 12:22) NOPE!
✔ Feature: Base: Set HWND! hwnd = root.winfo_id() @done(23-09-03 12:31)
✔ Feature: Base: Set PID! hwnd = root.os.getpid() @done(23-09-03 12:31)
✔ Feature: Base: Use HWND/PID? @done(23-09-03 12:31)
✔ Bug: game.dir.set is failing to rename the dev directory randomly? @done(23-09-03 12:34) was because XYplorer had it open
✔ Feature: Move function currently used to show vpk/folder export aka custom messagebox into shared utils @done(23-09-03 13:36)
✔ Feature: Start: Replace custom msgbox for export vpk/folder with context menu @done(23-09-03 13:36)
✘ Feature: Start: Consider merging add/new buttons under a context menu @cancelled(23-09-03 13:37)
✔ Feature: VDF GUI: Add some info like comments not getting saved @done(23-09-03 13:39)
✔ Feature: Browser: Keyboard: Bind arrow up/down to select search/start @done(23-09-03 13:56)
✔ Feature: Start: CTRL+F hotkey for focusing search @done(23-09-03 13:56)
✔ Feature: Start: Move search frame below the treeview @done(23-09-03 13:56)
✘ Refactor: Hotkeys: Should i move some global hotkeys to root/widget bindings? these would be gui only @cancelled(23-09-03 13:58)
✘ Refactor: BaseGui: Create a way to reduce duplicate code with {self.root.title()}: log.debug(f"{self.root.title()} GUI always on top: {bool}") @cancelled(23-09-03 14:07)
✔ Refactor: Use BaseGUI's self.show_context_menu_on_button @done(23-09-03 14:08)
✔ Bug: Menu: Uninstall dev mode -> Enable dev mode -> Error @done(23-09-03 14:09)
✔ Refactor: Cleaned up get & set game hwnd methods @done(23-09-03 14:24)
✔ Bug: Installer: Install: -> Progress gui is behind start @done(23-09-03 16:15)
✔ Bug: Installer: Code failed to rename the dev folder into the active game directory, because that directory already existed, without an ID file in it. Handle this some way @done(23-09-03 16:20)
✔ Bug: Installer: Uninstall: Uninstall while the game is running. Some error will be shown in terminal, however the code doesn't handle this causing the gui and code in general to just stop @done(23-09-03 16:27)
✔ Bug: Installer: Uninstall: It's quite slow deleting compared to just deleting manually with windows file explorer. probably because it's updating the gui all the time? @done(23-09-03 16:36)
✔ Bug: Installer: During rebuilding audio i get a bunch of 'failed to set window handle' before it correctly sets hwnd @done(23-09-03 16:40)
✘ Feature: Threading (GUI?) for lengthy operations such as shutil.rmtree mostly during install to prevent GUI's from freezing (Adds complexity, careful) @cancelled(23-09-03 17:14)
	✘ Tried threading for installer and while it does kind of work. start & progress gui are still set to not responding. and a lot of issues like show_message not working and the different methods not being able to properly return values. @cancelled(23-09-03 17:14)
	✘ Tried it for uninstaller. Pretty decent, except that once again show_message doesn't work this just isn't worth it @cancelled(23-09-03 17:14)
	✔ Bug: Log: Some logging printouts are printed twice. For example game dir switching (set) @done(23-09-03 20:44)
		✔ Duplicate entries in game class: INFO:shared_utils.hwnd_window_manager:Closed False! -> log.info(f"Closed {self.get_process_name(hwnd)}!") @done(23-09-03 20:44)
		✔ Already messed with this for longer than an hour @done(23-09-03 20:44)
		✔ Figured out that it only happens when actually switching dir modes. If calling the same thing it doesn't duplicate @done(23-09-03 20:44)
		✔ Figured out that when actually switching modes log statements in debug->game.py also duplicate?! very confusing stuff -- in fact all the way down the stack also in main_debug() @done(23-09-03 20:44)
		✔ During installer's install() the pintout format is also messed up 'DEBUG:game.dir:Found install' however it doesn't seem duplicated @done(23-09-03 20:44)
		✔ During install() copy_dir is also logging twice? @done(23-09-03 20:44)
			shared_utils.shared_utils (INFO): Copying files 'D:\Programming and projects\py-app-l4d-hud-editor\assets\mods\Dev Map\Left 4 Dead 2\export' -> 'E:\games\steam\steamapps\common\Left 4 Dead 2\left4dead2'       
			INFO:shared_utils.shared_utils:Copying files 'D:\Programming and projects\py-app-l4d-hud-editor\assets\mods\Dev Map\Left 4 Dead 2\export' -> 'E:\games\steam\steamapps\common\Left 4 Dead 2\left4dead2'
		✔ Tried removing the game class by changing it into a function @done(23-09-03 16:10)
		✔ Tried instead of making the logger a module global variable in game() i put it as part of the class @done(23-09-03 16:11)
		✔ Asked GPT a bunch @done(23-09-03 16:11)
		✔ Try a different logging module(?) @done(23-09-03 20:44) yeah using loguru. seems nice, better, even. only difference is module specific level filtering takes more effort but i dont even need it
✔ Bug: Browser: Open vanilla file -> TypeError: GameDir.get_vanilla_file() missing 1 required positional argument: 'relative_file_path' @done(23-09-03 21:27)
✔ Feature: Browser: Double click to open file & actually opening file in general should hide the gui @done(23-09-03 21:29)
✔ Bug: Browser: Load hud -> unsync hud -> error. seems like self.manager.retrieve_hud_name_for_dir(directory) isn't receiving a directory @done(23-09-03 21:39)
✔ Bug: Browser: Load hud -> unsync hud -> hud is unsynced, but not updated ingame @done(23-09-03 21:40)
✔ Bug: Load hud -> unsync hud -> browser treeview is not refreshed/cleared @done(23-09-03 22:01)
	✔ Bug -> Load hud -> unsync hud -> editor menu isn't refreshed @done(23-09-04 17:25)
✔ @done(23-09-04 17:25)
	✔ Bug: Load hud -> unsync hud -> browser treeview is not refreshed/cleared until after the game is reloaded? @done(23-09-04 17:25)
		✔ Possibly because clearing the treeview is triggering a method possibly in basegui which refreshes it again @done(23-09-04 17:25)
		✔ With testing i do know that __delayed show from base gui is calling on_show which refreshes the treeview and clears it @done(23-09-04 17:25)
		✔ For whatever reason manually calling treeview refresh doesn't delete the items @done(23-09-04 17:25)

✔ Found & added per module logging option for loguru @done(23-09-04 17:56)
✔ Also backup all DLC folders @done(23-09-04 20:50)
✔ Also restore all DLC folders @done(23-09-04 20:50)
✔ Refactor: Way to many get dir methods in dir.py i can combine almost all of them. _get_subdir is the most recent one @done(23-09-04 21:10)
✔ Refactor: Installer has that find_pak01_dir's callback thing. and game.dir has __get_pak01_vpk_subdirs which do the same. use one or the other? @done(23-09-04 21:21)
✔ Feature: Method to retrieve mainloop root @done(23-09-04 21:43)
✔ Feature: Debug hud should be modified so that it moves some panels around and i can actually tell its loaded in @done(23-09-04 21:56)
	✔ Syncer robust system for unsyncing every change made even after incorrect program exit @done(23-09-05 21:54)
		✔ Maintain a 'changes' data structure which keeps track of all the changes made in the game folder. EG: creating a custom folder/file or renaming a vanilla file to it's backup version. Could use an enum with actions and one or two path params. CREATE/NEW, COPY/RENAME @done(23-09-05 21:54)
		✔ If setup the right way i could probably use the 'changes' data structure to more easily undo changes in the game folder by looking up the appropriate changes to undo for a given file or folder that needs to be unsynced @done(23-09-05 21:54)
		✔ It might be a good idea to have a mini class which maintains the 'changes' data structure @done(23-09-05 21:54)