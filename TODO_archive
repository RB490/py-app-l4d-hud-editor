✔ Write installer class @started(23-08-15 23:54) @done(23-08-16 06:00) @lasted(6h6m51s)
	✔ Implementation: Replace & delete the old game instance @done(23-08-16 06:00)
	✔ Centralize video settings calls into a general function @done(23-08-16 06:00)
	
	✔ Test commands class @done(23-08-16 05:35)
	✔ Write commands class @done(23-08-16 05:35)
	
	✔ Implementation: Prompt to manually set the dev directory in hud_editing.start @done(23-08-16 05:02)
	
	✔ Installer: Re-enable prompts & checks in install() & try:catch @done(23-08-16 04:58)
	✘ Refactor: install/update/repair has so much duplicate code! @cancelled(23-08-16 04:57)
	✔ Write update/repair() @done(23-08-16 04:40)
	✘ Installer: uninstall() when install gets cancelled or otherwise fails @cancelled(23-08-16 04:36)
	✔ Bug: Editor autoexec gets appended to rather than replaced @done(23-08-16 04:27)
	✔ Bug: Game doesn't rebuild audio @done(23-08-16 04:27)
	✔ Write uninstall() @done(23-08-16 03:28)
	
	Nuh-uh. I need to have access to both game folders
	✘ Game: Still allow enabling of user mode or dev mode when the other isn't available(?) @cancelled(23-08-16 02:50)
	✔ Test installer class @done(23-08-16 02:42)
	✔ Refactor: wait_on_process_and_get_hwnd // probably/maybe split into 2 funcs? @done(23-08-16 02:41)
	✔ Write .run() & test syntax used in installer: .run(mode, wait_on_close=True) @done(23-08-16 02:39)
✔ Test dir class @done(23-08-15 20:10)
✔ Write dir class @done(23-08-15 20:10)

✔ Rewrite from first principles @done(23-08-16 06:00)


✔ ^ yes this is needed to avoid important recursion @done(23-08-17 11:53)
✔ minor refactor: I'm passing self to the game subclasses, but since singleton im pretty sure i don't need to @low @done(23-08-17 11:53)

✔ Use dir_mode & installation status enum's throughout the game manager @done(23-08-12 15:55)
✔ Use InvalidIDError @done(23-08-12 15:55)
✔ Installer: Keep track of installation status @done(23-08-12 17:17)

✔ Write code to fix bad unsynx @done(23-08-17 13:34)
✔ When should i check for bad unsync & fix it? Maybe hud.start_editing @started(23-08-17 12:04) @done(23-08-17 13:34) @lasted(1h30m4s)
✔ Installation class: Maintain a backup of key directories @done(23-08-17 11:56)
✔ Bad unsync detection: Keep track of sync status in the ID file @done(23-08-17 11:55)
✔ Handle script closure to ensure unsyncing even during crashes or failures @critical @started(23-08-17 12:04) @done(23-08-19 22:43) @lasted(2d10h39m43s)
✔ Sync: Cleanup test @done(23-08-19 22:43)
✔ Sync: Refine error handling strategy in sync class @done(23-08-20 00:18)
✔ Sync: Make use of the SyncState enum in the sync class. and in the rest of the script if relevant + modify test @high @done(23-08-19 23:00)
✔ Test: Sync: restore_developer_directory @done(23-08-20 00:20)
	✔ Get installation state was using the SyncState enum! @done(23-08-24 01:10)
✔ Bug: ID handler: User dev mode is installed -> Get installation state -> Exception has occurred: KeyError @started(23-08-20 08:53) @done(23-08-20 09:10) @lasted(17m53s)
✔ Retrieving installation state for mode that isn't installed returns UNKNOWN should it be UNAVAILABLE or just None instead? @done(23-08-20 09:38)	
✘ Bug: ID handler: Calling ID handler without a dir_mode doesn't raise an error! also check for sync and other methods 'gamez.dir.id.get_installation_state' @cancelled(23-08-20 09:40) (Can't actually do anything with this. Just fix invalid method call)	
✔ Issue i got personally confused that i should be using self.game.dir.get(DirectoryMode.USER) to check if dev exists @done(23-08-20 09:41)
✔ Instead of using game.dir.get create game.installed()? @done(23-08-20 09:52)

✔ Bug: Addontitle: Exception with invalid format of the addoninfo.txt text file @done(23-08-20 10:16)
✔ Bug: Addon title for the debug hud was not retrieved @done(23-08-20 10:16)
✔ Fix 'added' files option not working in treeview, no data retrieved @done(23-08-20 10:20)	
✔ Address in-game console bugs related to malformed VPK addons loading @done(23-08-20 10:20) using tiny valid vpk's

✔ Investigate console errors for failing to load maps @done(23-08-20 10:21) config appending instead of rewriting the editor autoexec
✘ Bug: Different separators in is_subdirectory even after trying various normpath solutions @low @cancelled(23-08-20 10:24)

✔ Am I using too many exceptions? When should i return a (None) value instead @done(23-08-20 10:28)
✔ Testing: Create test for syncer @done(23-08-20 10:29)
✔ Remove duplicate code in hud.py related to GuiHudStart instance creation @done(23-08-20 10:38) show_start_gui()
✔ Bug: Browser has a visual glitch when starting up. Shows and disappears within a second @done(23-08-20 11:03)
✔ General: Add icons to all GUI's @done(23-08-20 11:03)
✔ General: Create custom app.ico @done(23-08-20 11:10)
✔ General: Add icon buttons to all GUI's @started(23-08-20 11:34) @done(23-08-20 11:35) @lasted(1m8s)
✔ Browser: Treeview menu icons @done(23-08-20 14:09)
✔ Browser: Treeview context menu functionality @started(23-08-20 14:15) @done(23-08-20 15:10) @lasted(55m38s)
	✔ Create an important note with example script:: you can only have one main gui. When using a subgui that should be using tk.Toplevel() otherwise garbage collection causes pyimage errors @done(23-08-20 18:58)
✔ Browser: gui descriptions failing to load @done(23-08-20 18:58)
✔ Browser: Treeview header sorting @done(23-08-20 21:18)
✔ Bug: Browser: Double click on header -> Some error message shows @done(23-08-20 21:19)
✔ Browser: Last modified column read from the file like i did in sourcemod editor. Auto sort by this column @done(23-08-20 21:27)
✔ Browser: Display custom status for files in the browser (Consider adding columns or a status bar) @done(23-08-20 21:55)
✔ Browser: 'added-to-hud' status for files in the browser (Consider adding columns or a status bar) @done(23-08-20 21:55)
✔ Bug: Browser: 'All' toggle isn't working right. only addoninfo&addonimage are shown @started(23-08-20 21:30) @done(23-08-20 21:55) @lasted(25m16s)
✔ Add all functionality of the start gui into the editor menu. Remaining: Create/Add hud & dev options menu @done(23-08-20 22:21)
✔ Bug: Try to load any file without controls into the hud descriptions gui -> some error @done(23-08-20 22:33)
✔ Bug: Hud Descriptions Gui: Remove default options for controls @done(23-08-20 22:38)
✔ Browser: Disable multiple instances for the gui descriptions gui @done(23-08-20 22:40) made it a singleton
✔ Browser: Treeview context menu functionality: hud descriptions @done(23-08-20 22:59)
✔ Browser: Treeview context menu functionality: treeview_recycle @done(23-08-21 19:58)
✔ Browser: @icons Treeview context menu icons - fetch from ahk version @done(23-08-21 21:15)
✔ 4. VDF Feature: Sort keys @done(23-08-22 20:50)
✔ 3. String/ VDF Module: Output either with vdf.dump for easiness or as string with added benefits such as properly inserting control descriptions & aligning the key's values on the same indent level @done(23-08-22 21:38)
✔ 2. VDF Module: Load vdf into object and make any changes such as changing the integers @done(23-08-22 17:44)
✔ loop file line by line. find identifier lines. replace the text between double quotes with DELETE_ME or something like that so the file format remains intact and vdf module can delete these @done(23-08-22 17:36)
✔ 1. String: Preprocessing of the file (properly removing xbox360 entries and such, can possibly be quite easy, test removing splitscreen key and then loading into vdf) @done(23-08-22 17:35)
✔ Bug: VDF class didn't handle letter values properly such as "c-150" @done(23-08-22 22:12)
✔ Bug: VDF Modify intergers did not recursively modify so split_screen type key:values werent modified @done(23-08-22 22:17)
✔ Feature: VDF: Undo changes. Either programatically or (more likely) reload from file @done(23-08-23 01:47)
✔ Feature: VDF: Save certain settings for the vdf gui @done(23-08-23 01:14)
✔ Feature: VDF: Proper widget layout. before&after side by side and the controls nicely layed out. Integer modifying should be a self contained lil group of controls @done(23-08-23 01:13)
✔ Bug: VDF GUI: When closing the script goes on to do some stuff: Modifying integer values...Save the modified VDF object to a file @done(23-08-23 01:10)
✔ Feature: VDF: Save window geometry @done(23-08-23 01:09)
✔ Feature: VDF: With annotation disabled the __description__ keys should be removed @done(23-08-23 00:59)
✔ Feature: VDF: Proper before & after comparison @done(23-08-23 00:55)
✔ Sync: Refactor(?) @done(23-08-24 00:36)
✔ Refactor: simplify & improve code (naming) @done(23-08-23 03:17)
✔ Bug: VDF: Confirm file was able to be read properly, if not return @done(23-08-23 03:16)
✔ Browser: Treeview context menu functionality: VDF: Modify @done(23-08-23 03:08)
✔ Feature: VDF: Add support for also deleting entire controls, not just keys as they can also be identifiere'd @done(23-08-23 03:04)
✔ Feature: VDF: Bug: Reset -> DELETE_ME entry is shown? @done(23-08-23 03:04)
✔ Feature: VDF: Verify output validity by using the vdf module to load it before saving/returning @done(23-08-23 02:29)
✔ Feature: VDF: Save option @done(23-08-23 02:29)
	✔ GPT did a great job. looks like i should modify how the class works some to fully support this. for example return data @done(23-08-23 01:55)
✔ VDF: A single gui for modifying the VDF files. All the options such as annotate, integers + text fields with a before & after. + warning about larger (scheme) files + backup in recycle bin @done(23-08-23 01:55)
✔ Refactor. Add method docs @done(23-08-23 01:48)
✔ Bug: Descriptions GUI: Have a file loaded -> open another file -> contents are discarded. should probably  not allow this or do something else @done(23-08-23 16:31)
✔ Feature: Description GUI: Show whether this is a custom file or not @done(23-08-23 15:39)
✔ Feature: Description GUI: Option to remove this file entirely from the description data @done(23-08-23 15:35)
✔ Modify descriptions class to keep track of whether a file is custom. This is useful so i have the option to not show thene when showing 'not added yet' files in the browser @done(23-08-23 15:19)
✔ Refactor: Installer: Use new is_game_files_dir_return_pak01 method @done(23-08-23 14:27)
✔ Refactor: Installer __find_pak_files manually uses pak01_dir.disabled -- the installer class should use the get backup path function @done(23-08-23 13:52)
✔ Bug: Descriptions GUI: Saving contents for a custom hud file causes an error. either allow saving somehow, or disallow them from opening @done(23-08-23 13:38)
✔ Bug: Descriptions GUI: Modify file description -> save -> load same file -> changes weren't actually saved at all @done(23-08-23 13:24)
✔ Descriptions: Add print statements @done(23-08-23 13:17)
	✔ ^ use pycharm. it does support it @done(23-08-23 20:50)
	✔ into the installer which isn't possible. gpt suggested various solutions which seemed maybe possible but seems like something i would leave for later @done(23-08-24 01:10)
	✔ ^ okay, so, gpt says it's deue to the nature of VSCode's static analysises tool and using type hints could fix it. but i need to import the game class @done(23-08-24 01:10)
✔ but in some locations it wouldnt get highlighted such as: installer: self.game.dir.get_main_dir_backup @done(23-08-24 01:10)
✔ for example hud/descriptions/self.game.dir.is_custom_file() works fine @done(23-08-24 01:10)
✔ Bug: Why does VSCode not highlight class in some places but does in others // looks like this is because of me passing game_class to installer manually @done(23-08-23 20:50)

✔ Bug: Installer rebuild_audio couldn't run game (because of fixed bug) but it didn't detect that shit at all! @done(23-08-23 17:27)
✔ Bug: Installer would ignore exceptions and always report the installation as successfull

✔ Test: Installer: New is_game_files_dir_return_pak01 method (install, repair or whatever) @done(23-08-23 16:58)
✔ Bug: game.dir.Set() cancelled because vanilla game dir didn't exist. but that doesnt mattter @done(23-08-23 16:57)
✔ Bug: Installer: Dev was fully installed -> repair dev install -> install created another dev folder? causing issues @done(23-08-23 16:49) they were incorrectly using the current install state
✔ Bug: VDF GUI: The little tk.toplevel() subgui opens real quick when loading the gui @done(23-08-23 16:38)
✔ Bug: VDF gui not loading for hudlayout.res @done(23-08-23 16:36)
✘ Refactor: Rename data manager to persistent data? @cancelled(23-08-23 22:42)
✔ Refactor: Loading&Saving JSON data. Create class & use throughout the program @done(23-08-24 01:11)
✔ Refactor: I'm passing my persistent_data object absolutely everywhere. Create a persistent_data class singleton instead @started(23-08-23 21:34) @done(23-08-23 22:40) @lasted(1h6m54s)
✔ Refactor: GUI: Base GUI class with common functionality for all other gui's to use @done(23-08-23 23:44)
✔ Refactor: In functions.py there are a lot of functions (somewhat vaguely) related to hud stuff it seems like that should could be a class @done(23-08-24 00:31)
✘ Use Super(). This can elimiate the need to for example define self.persistent_data again in subclasses @cancelled(23-08-24 00:32)
✘ Refactor: Private and internal classes dont need param checking, only public @cancelled(23-08-24 00:33)
✔ Added clear messageboxes to installer failures @done(23-08-24 00:35)
✔ Refactor GameDir: Ensure functions like get_main_dir_backup, get_main_dir_backup_materials are used throughout the codebase @done(23-08-24 00:35)
✔ Reevaluate the use of persistent_data in classes, possibly with a dedicated class or alternative approach @done(23-08-24 00:37)
✘ Installer: Add try&except for validate_mode_parameter calls with custom invalid mode param exception to catch @cancelled(23-08-24 00:38)
✘ Break up the game commands execute method for better organization @cancelled(23-08-24 00:45)
✔ Evaluate the use of singleton patterns in GUI management @done(23-08-24 00:45)
✔ Explore restructuring options for more efficient code flow @done(23-08-24 00:45)
✔ Streamline and test HUD editing process for improved code path @done(23-08-24 00:46)
✔ Make the function to create lambda commands a shared utility, and use it in the project @done(23-08-24 00:51)
✔ Replace assert statements with proper error handling using try/catch @done(23-08-24 00:52)
✔ Enums. For example for steam_info object (?) or make it into a class @done(23-08-24 00:53)
✔ Simplify manager class, improve 'get_dir' function and other enhancements @done(23-08-24 00:54)
✔ Utilize exception handling for specific cases like AssertionError and ValueError @done(23-08-24 00:54)
✔ Add dir_mode enum checks to game class? @done(23-08-24 00:54)
✔ Make internal class methods protected by adding underscores. And internal with double __ @done(23-08-24 00:54)
✔ Refactor: use the same two functions for loading/saving data? might cause unnecesary class cluttering. ask gpt @done(23-08-24 00:55)
✔ Refactor: descriptions: Pretty sure it could/should use my general functions for loading/saving data @done(23-08-24 00:55)
	✘ That would simplify some code paths: -- although it seems like that would maybe defeat the single purpose principle? @cancelled(23-08-24 00:56)	
✘ Refactor ID handler: Should i combine the manual selecting of ID path into the get/set functions? @cancelled(23-08-24 00:56)
✔ Refactor GameDir: should get_main_dir_backup check if the directory is valid? or in the code that uses it @done(23-08-24 00:56)
✔ Bug: GUI: I can use show() method for my gui without first having ran the gui's mainloop with run() @done(23-08-24 01:10)
✘ Global hotkey management: Explore using a global singleton hotkey manager to streamline hotkey handling @cancelled(23-08-24 01:11)
✔ Bug: VDF modifier causing infinite loop: GUI VDFModifier > load_file > VDFModifier > loop starts with hud and shit @done(23-08-24 11:08)
✔ Re-enable self.root.title lines @done(23-08-24 11:08)
✔ Modify syntax from self.hud.sync self.hud.desc -> self.hud.editor.syncer @done(23-08-24 11:08)
✔ HudDescriptions is failling because it's importing GuiBrowser & GuiBrowser is failing because? it imports GuiHudDescriptions? recursive? @done(23-08-24 11:08)
✔ Fixed a wide variety of BaseGui & infinite recursion import bugs @done(23-08-24 11:06)
✔ Refactor GameDir: A bunch of duplicate code related to methods like: get_main_dir_backup, get_main_dir_backup_materials @done(23-08-24 12:12)
✔ Feature/Refactor/Bug: I'm currently manually setting the hud_dir, but this should definetly be done with set_dir method @done(23-08-24 11:50)
✔ Bug: Addon images are not in the center of StartGui. Fixed by removing: self.picture_canvas.config(scrollregion=self.picture_canvas.bbox("all")) @done(23-08-24 11:42)
✔ Refactor: ID handler: Consider simpler names? eg: game.dir.id.set_id_path could maybe be just id.set() @done(23-08-24 12:17)
✔ Refactor: editor class. Some notes: start_editing has confusing checks like: if self.syncer.get_sync_status() and self.syncer.get_source_dir() == self.hud_dir and sync_hud @done(23-08-24 12:19)
✔ install_update_repair_duplicate_code_refactor_draft.py @done(23-08-24 16:26)
✔ Refactor: installer's install() repair() update() have a lot of duplicate code. consider my options @done(23-08-24 16:50)
✔ Refactor: remove game_class passing to prompts? by creating an instance in the func @done(23-08-24 16:50)
✔ Bug: Finished installinging! when finished installing @done(23-08-24 16:47)
✔ Installer message boxes for unstalling, repairing, updating installing @done(23-08-24 16:46)
✔ Installer: Onl y prompt to select dev directory, if it wasnt found @done(23-08-24 16:44)
✔ Copy_dir considerations: @done(23-08-24 17:02) result: shutil.copytree needs the destination directory to not exist so it is useful
✘ Installer: also update individual files that get processed into GUI? could be nice if it's easy enough to do. might want to create progress as a class instance, maybe @cancelled(23-08-24 18:20)
✔ Installer: Incorporate progress GUI for the installer class: unstalling: individual files (only if feasible, depends on gpt) @done(23-08-24 18:20)
✘ Bug: Installer gui Progressbar doesn't update without mainloop() if mainloop() is used for another gui @cancelled(23-08-24 18:19) <- Tried threading but that doesn't work just not using progressbar	
✔ Installer: Incorporate progress GUI for the installer class. __process_installation_steps: just easy peasy each step @done(23-08-24 17:50)
✔ Feature: Closing the installer progress gui should cancel installation? reset installation state? @done(23-08-24 17:50)
✔ Bug: Cancelled installation halfway through for example 'VERIFYING_GAME' -> id file exists -> install dev -> asks to select id file when though id file exists @done(23-08-24 17:48)
✘ Feature: Installer: Hide start gui during installation/uninstall procedures, confirm that doesn't cause an issue with the progress gui @cancelled(23-08-24 23:25)
✔ Feature: Installer: Check whether the developer directory is out of date by comparing the (some) pak files @done(23-08-24 23:22)
✔ Refactor: Clean duplicate code for looping game folder. in is_custom_file & out_of_date check @done(23-08-24 23:14)
✔ Bug: Installation cancelled because of a bug -> terminal says finished installing! @done(23-08-24 22:57)
✔ Installer: Minor logic improvement @done(23-08-24 22:55)
✔ Bug: Installation cancelled because of error -> bug only prints in console, but should be a message @done(23-08-24 22:50)
✔ Bug: When resuming installation state the GUI still contains total_steps as if starting for 0. either modify total steps or count which step i'm on in total probably the second @done(23-08-24 22:45)
✔ Bug: Installation step error: GameDir._get_main_subdir() missing 1 required positional argument: 'subdir_name' @done(23-08-24 22:31)
✔ Bug: Installer updates step after completing it instead of before @done(23-08-24 22:27)
✔ Feature: Installer: I should use uninstall() in the other place in the installer where it deletes the dev dir. actually; create a separate method for deleting a folder and use that for uninstall() and in common_installation_logic @done(23-08-24 22:12)
✔ Feature: Installer: Considering directory deletion takes a while, i should  update installation state to prending_deletion or some such and use that in the script @done(23-08-24 22:09)
		✘ it then suggested removing the <configure> bind during updating. but because update triggers so often that doesn't work @cancelled(23-08-25 15:24)
		✘ Tried this for a lil while. doesn't seem possible. gpt came up with binding <Configure> which hits when user resizes, but also when root.update() resizes, @cancelled(23-08-25 15:24)
✘ progress gui: can i stop automatic resizing when i manually resize? + at that point change minimum width to a smaller size to allow resizing @cancelled(23-08-25 15:24)
✘ Feature: VPK: Handle VPK class failing to extract specific files during installation. Right now they are just printed. @cancelled(23-08-25 15:34) Not doing this because it's not important. maybe 1 or 2 very minor files will fail to extract
	✔ The reason is that when a custom hud file is synced it could currently get reported as default. if synced i would need to check if a .backup version exists, if not its custom @done(23-08-26 20:17)
✔ Refactor: is_custom_file should probably take into account whether a hud is synced? or disable it if a hud is synced as i intend to only use it when adding new files? @done(23-08-26 20:17)
✔ Refactor: Browser: Show all hud files -> a shit ton of calls to look up various info causing unnecesary slowdown @done(23-08-26 20:58)
✔ Refactor self.hud.edit.desc doesn't make too much sense. move it to hud.desc. @done(23-08-26 20:58)
✔ Refactor: is_custom_file finds the first possible match of the default file in the dev folder. use this throughout the script (probably just for the browser open default file) & rename method accordingly @done(23-08-26 20:19)
✔ Refactor: @idea My GUIS should maybe have a top level parameter for debugging and just generally makes it a bit clear what is happening? @done(23-08-26 20:01)
✔ Feature: Start GUI: Export as directory option @done(23-08-26 18:04)
✔ Feature: Start GUI: Also use images for the context menu @done(23-08-26 17:07)
✔ Feature: Start GUI: The remove button should have a confirmation dialog weather to remove it from the disk as well @done(23-08-26 17:01)
✔ Feature: Start GUI: Niceify @done(23-08-26 16:40)
✔ Feature: Start GUI: Use the exact same variables voor de context menu and The Buttons for the images @done(23-08-26 16:40)
✘ Feature: Start GUI: The add button should be called open instead and change the Icon to the open Icon Arrow @cancelled(23-08-26 15:15)
✔ Feature: Start GUI: Make edit&addonimage into a panel that sits in the bottom right of the gui @done(23-08-26 15:14)
✔ Feature: Start GUI: Add buttons for all context menu options(?) remove/open_dir/save_as_vpk // would have to check/change status on whether a hud is selected + edit button should, too @done(23-08-26 15:14)
✔ Feature: catch specific exception of the progress gui closing during installation -> display a nicer infobox message @done(23-08-26 14:58)
✔ Feature: installer progress gui close confirmation box. Could be achieved by making the progressGU into a baseProgressGUI which extend from baseGUI and then create another gui to extend from BaseProgress @done(23-08-26 14:57)
✔ Bug: Progress gui step 1 seems to be cut off with three dots "..." then step 2 resizes the gui to where it should be @done(23-08-26 14:44)
✔ Bug: Progress gui is being side to wide as fuck by default. seemingly ignoring initial_width @done(23-08-26 14:38)
✔ Bug: Error when the start gui opens the browser gui @done(23-08-26 14:07)
✔ Bug -> full settings json -> open start gui by opening it with debug_start_gui() -> close start -> json is compltely empty @done(23-08-26 13:49) issue was using self.get_window_geometry without the ()
✔ Bug: Empty settings -> load start -> error because no huds are available @done(23-08-26 13:34)
✔ Feature: Start GUI: Remove menu bar -- button should open that context menu instead @done(23-08-25 16:17)
✔ Refactor: Start GUI: Class @done(23-08-25 15:50)
✔ Refactor: Duplicate code: game.dir has code related to finding pak01's but the installer does aswell @done(23-08-25 15:47)
✔ Refactor: VPK: VPK class @done(23-08-25 15:31)
✔ Bug: When deleting game dev installation the gui gets resized a lot by the different length paths causing it to flicker and visually glitch out some @done(23-08-25 00:14)
✔ Feature: Have a method to check validity of the installation directories by verifying that they exist and only have version aka id file in the entire steam directory @done(23-08-26 23:33)
✔ Refactor: Add certain check during script startup so they don't have to be done anywhere else @done(23-08-26 23:50)
✔ Feature: Start GUI: Context menu icons @done(23-08-26 23:53)
✔ Feature: Start GUI: Specific button icons rather than all identical @done(23-08-26 23:53)
✔ Bug -> break the json -> terminal resetting settings -> failed to save data to file @done(23-08-27 00:08)
✔ Bug -> Break the json -> start program -> dialog resetting settings -> pyimage10 doesn't exist error inside of start gui @done(23-08-27 00:10)
✔ Feature: Settings: Add default values for settings. Do this in such a way that if Get() fails to retrieve value, look it up from the default value data & load() uses it as a default @done(23-08-27 00:10)
✔ Bug: todo plugin not finding embedded todo's? TODO @done(23-08-27 00:13)
✔ Refactor: Indicate that deleting files through the browser sends them into the trash @done(23-08-27 00:14)
✔ Bug: Browser: Every file is reported as not a custom file @done(23-08-27 00:32)
✔ Bug: Browser: Double clicking anywhere registers, including the header! @done(23-08-27 00:42)
✔ Refactor: app-icons repo. delete unnecesary dimensions & all other things @done(23-08-27 01:14)
✔ Refactor: IMAGES directory @done(23-08-27 01:50)
✔ Bug: editor menu -> show panel doesn't seem to take selected panel into account at all? doesnt toggle anything @done(23-08-27 12:22)
✔ Feature: editor menu -> Show set coords in the menu @done(23-08-27 11:55)
✔ Feature: Added ImageConstants class @done(23-08-27 12:41)
✔ Bug: VDF gui doesn't load. atleast for hudlayout.res @done(23-08-27 14:21)
✔ Bug: VDF GUI always defaulting geometry when loaded through browser @done(23-08-27 14:29)
✔ Menu: @icons  Add icons @done(23-08-27 16:32)
✔ Menu: @icons  Test: Do toggleable menu options support icons in any way or state? @done(23-08-27 16:32)
✔ Bug -> If i open browser without loading a hud instance first. i get an error. it's fine when i first do hud_inc = get_hud_debug_instance() @done(23-08-27 17:08)
✔ Bug: Browser -> Open start gui -> errors. This is most likely because i only create widgets once. and its a singleton @done(23-08-27 17:08)
✔ Bug -> Browser -> Open start -> Starts debugging the process gui?!. Even funnier. it doesn't happen when debugging step by step @done(23-08-27 17:17) was dueue to some caching issue. fixed by reloading vscode
✔ Editor menu: Add all start GUI functionality. We're almost there already. for example i can add but not create new huds @done(23-08-27 17:23)
✔ Refactor use the image constants class everywhere @done(23-08-27 17:23)
✘ Post: Already tried this for an hour. But a way to retrieve the OS's default icon for a file path to be used in the treeview @cancelled(23-08-27 17:43)
✘ Pull some workshop map off of steam to use for L4D2. And possibly a map for L4D1 @cancelled(23-08-27 17:43)
✘ Bug: Currently the game gets bound to the python process, and also closes if the script closes @impossible? (note that outside of debugging this more or less isn't an issue, or maybe even a feature) @cancelled(23-08-27 17:44)
✘ Seemingly impossible although apparently it is possible: Run a process detached from python @cancelled(23-08-27 17:44)
✘ Note: Running the game before starting the editor works fine. @cancelled(23-08-27 17:44)
	✘ so could use a script to launch it and then the editor @cancelled(23-08-27 17:44)
✘ I was able to get it to work with notepad.exe using subprocess start /B notepad.exe, @cancelled(23-08-27 17:44)
✘ however that didn't work for the game or steam @cancelled(23-08-27 17:44)
✘ this is legitimately around 2 hours of trail and error: python_process_decouple_testing.py @cancelled(23-08-27 17:44)
✔ Bug: Popup doesn't seem to work right. It doesn't get hidden by default and doesn't seem to actually reference basegui even though it is by code @done(23-08-27 18:27)
✔ Feature: i'll have to make a class to work with the 3 different main GUI's. or maybe make the popup thing work as toplevel @done(23-08-27 18:27)
✔ Feature: Can i find a way to show a context menu which closes then losing focus using python? Can try to get Tkinter to work & maybe other frameworks @done(23-08-27 18:28)
✔ Pretty sure i have the solution: When pressing the 'show context menu' hotkey. you show the gui first, because clicking on the gui closes the menu just fine. should cover the entire screen @done(23-08-27 18:28)
✔ And optionally (almost) transparent. then close/hide the gui again when menu closes / keypress is detected on the gui @done(23-08-27 18:28)
✔ Feature: Separate method to create 'Parent menu' with or without images based on whether it's being added to a context menu or menubar (menubar doesn't support images) @done(23-08-27 18:28)
✔ Feature: Browser: Treeview context menu toggle entries based on availablility? eg. default item might not be available self.menu_bar.entryconfig("Hud", state="disabled") @done(23-08-27 18:28)
✔ Feature: Fixed weird little gui from showing up when creating BaseGUI tktoplevel without a gui opened already @done(23-08-27 20:35)
✔ Feature: Made HudDescriptions gui a singleton @done(23-08-27 20:37)
✔ Feature: Add hotkey for contexte menu popup gui to help menu @done(23-08-27 20:54)
✔ Feature: Create hotkey for showing the context menu @done(23-08-27 20:54)
✘ Feature: Browser: Status bar showing 'custom' & 'added-to-hud' status? @cancelled(23-08-27 21:03)
✘ Bug: Show_browser_gui() ->  can't invoke "event" command: application has been destroyed // this also happens for show_start_gui @cancelled(23-08-27 21:08)
	✘ doesn't happen when showing start (so destroying browser) @cancelled(23-08-27 21:08)
	✘ doesn't happen when delayed by input() @cancelled(23-08-27 21:08)
	✘ not even an issue @cancelled(23-08-27 21:08)
	✘ could maybe separate creating widgets from init, and creat them when showing (only once) @cancelled(23-08-27 21:08)
✘ Refactor: too-many-lines in menu.py @cancelled(23-08-27 21:19)